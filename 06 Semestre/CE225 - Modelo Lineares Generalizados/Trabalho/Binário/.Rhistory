tinytex::install_tinytex()
install.packages("latexpdf")
library(latexpdf)
install.packages("knitr")
library(knitr)
library(tinytex)
library(latexpdf)
library(knitr)
Sys.getenv("R_ENVIRON")
install.packages("tinytex")
require(gamlss) ### Carregando o pacote gamlss.
require(gamlss.demo)
options(device = 'x11')
data(rent) ### Dados sobre aluguéis de imóveis em Munique, 1980.
help(rent) ### Acessando a documentação da base de dados.
par(mfrow = c(2,2), mar = c(4,4,2,2), las = 1)
plot(R ~ Fl, data = rent, col = 'blue', cex = 0.8)
plot(R ~ A, data = rent, col = 'blue', cex = 0.8)
plot(R ~ H, data = rent, col = 'lightblue', cex = 0.8)
plot(R ~ loc, data = rent, col = 'lightblue', cex = 0.8)
help(gamlss)
mod1 <- gamlss(R ~ Fl + A + H + loc, family = NO, data = rent)
coef(mod1)
### Se ajustássemos usando a função lm...
mod1_2 <- lm(R ~ Fl + A + H + loc, data = rent)
coef(mod1_2)
summary(mod1)
plot(mod1)
fitted(mod1, what = 'sigma')[1]
par()
plot(rent$A, resid(mod1))
lines(lowess(resid(mod1) ~ rent$A), col = 'red', lwd = 2)
Exercícios 1, 3, 4, 8, 12. Entregar até o dia 12/08/20.
10/08/20. Exercícios.
**Exercício 01**
**Exercício 01**
**Exercício 01**
**Exercício 01**
**Exercício 01**
TRANSFORMAR MATRIZ num objeto MARKOVCHAin
library(markovchain)
estados = c("Ocupado","Não ocupado")
Prob.T=matrix(c(0.9,0.1,0.6,0.4),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT = new("markovchain", states=estados, transitionMatrix=Prob.T, name="Fila de servidor único")
ProbT
ProbT^2
ProbT^2
ProbT
TRANSFORMAR MATRIZ num objeto MARKOVCHAin
g1 <- matrix(c(1,0,0,1), ncol=2);g1
g1%%g1%%g1
TRANSFORMAR MATRIZ num objeto MARKOVCHAin
g1 <- matrix(c(1,0,0,1), ncol=2);g1
g1%%g1%%g1
TRANSFORMAR MATRIZ num objeto MARKOVCHAin
g1 <- matrix(c(1,0,0,1), ncol=2);g1
g1%%g1%%g1
g2 <- matrix(c(0,1,1,0), ncol=2);g2
#g2^2
g2%*%g2
#g2^3
g2%%g2%%g2
#g2^4
g2%%g2%%g2%*%g2
g2
\left(\begin{array}
0.8944272 & 0.4472136\\
-0.4472136 & -0.8944272
\end{array}\right\)
\left(\begin{array}
0.8944272 & 0.4472136\\
-0.4472136 & -0.8944272
\end{array}\right\)
\left(\begin{array}
0.8944272 & 0.4472136\\
-0.4472136 & -0.8944272
\end{array}\right\)
g1 <- matrix(c(1,0,0,1), ncol=2);
g1
g1%%g1%%g1
g1 <- matrix(c(1,0,0,1), ncol=2);
g1
g1%%g1%%g1
g1 <- matrix(c(1,0,0,1), ncol=2);
g1
g1%%g1%%g1
g1 <- matrix(c(1,0,0,1), ncol=2)
g1
g1%%g1%%g1
g1 <- matrix(c(1,0,0,1), ncol=2)
g1
g1%%g1%%g1
Prob.T=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT = new("markovchain", states=estados, transitionMatrix=Prob.T, name="Fila de servidor único")
ProbT
ProbT^2
ProbT^2
ProbT^3
ProbT^4
ProbT^2
ProbT^3
ProbT^4
Prob.T1=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT1 = new("markovchain", states=estados, transitionMatrix=Prob.T1, name="Fila de servidor único")
ProbT1
ProbT1^2
ProbT1^3
ProbT1^4
Prob.T1=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
Prob.T1=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT1 = new("markovchain", states=estados, transitionMatrix=Prob.T1, name="Fila de servidor único")
ProbT1
ProbT1^2
ProbT1^3
ProbT1^4
estados = c("Estado 1","Estado 2")
Prob.T1=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT1 = new("markovchain", states=estados, transitionMatrix=Prob.T1, name="Fila de servidor único")
ProbT1
ProbT1^2
ProbT1^3
ProbT1^4
library(markovchain)
estados = c("Estado 1","Estado 2")
Prob.T1=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT1 = new("markovchain", states=estados, transitionMatrix=Prob.T1, name="Fila de servidor único")
ProbT1
ProbT1^2
ProbT1^3
ProbT1^4
Prob.T2=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT2 = new("markovchain", states=estados, transitionMatrix=Prob.T2, name="Fila de servidor único")
ProbT2
ProbT2^2
ProbT2^3
ProbT2^4
**Exercício 03**
Seja ${C_n:n≥0}$ uma Cadeia de Markov com dois estados.
(a) Encontre $P0(T_0=n)$
(b) Encontre $P0(T_1=n)$
Prob.T2=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT2 = new("markovchain", states=estados, transitionMatrix=Prob.T2, name="Fila de servidor único")
ProbT2
Prob.T2=matrix(c(0,1,1,0),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT2 = new("markovchain", states=estados, transitionMatrix=Prob.T2, name="Fila de servidor único")
ProbT2
ProbT2^2
ProbT2^3
ProbT2^4
**Exercício 03**
Seja ${C_n:n≥0}$ uma Cadeia de Markov com dois estados.
(a) Encontre $P0(T_0=n)$
(b) Encontre $P0(T_1=n)$
library(markovchain)
estados = c("Estado 1","Estado 2")
Prob.T1=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT1 = new("markovchain", states=estados, transitionMatrix=Prob.T1, name="Fila de servidor único")
ProbT1
ProbT1^2
library(markovchain)
estados = c("Estado 1","Estado 2")
Prob.T1=matrix(c(1,0,0,1),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT1 = new("markovchain", states=estados, transitionMatrix=Prob.T1, name="Matriz Gama")
ProbT1
ProbT1^2
ProbT1^3
ProbT1^4
Prob.T2=matrix(c(0,1,1,0),nrow=2, ncol=2,byrow=T, dimnames=list(estados,estados))
ProbT2 = new("markovchain", states=estados, transitionMatrix=Prob.T2, name="Fila de servidor único")
ProbT2
ProbT2^2
ProbT2^3
ProbT2^4
No caso as duas cadeias terão distruibuição estácionária identicas?
ProbT2^5
ProbT2^6
ProbT2^7
No caso as duas cadeias terão distruibuição estácionária identicas?
require(gamlss) ### Carregando o pacote gamlss.
require(gamlss.demo)
options(device = 'x11')
data(rent) ### Dados sobre aluguéis de imóveis em Munique, 1980.
help(rent) ### Acessando a documentação da base de dados.
confint()
help(confint)
require(gamlss)
require(gamlss.demo)
require(gamlss.util)
require(faraway)
require(boot)
require(gamlss)
require(gamlss.demo)
require(gamlss.util)
require(faraway)
require(boot)
shiny::runApp('teste')
setwd("~/")
runApp()
runApp()
library(gamlss)
?fk
########################################################################
### Exemplo
require(gamlss)
require(MASS)
require(gamlss.add)
require(ISLR)
require(car)
data("mcycle")
help("mcycle")
head("mcycle")
x11(width = 10, height = 10)
par(cex = 1.2, las = 1)
plot(accel ~ times, data = mcycle, col = 'blue', ylab = 'AceleraÃ§Ã£o',
xlab = 'Tempo apÃ³s o impacto (ms)', main = 'PolinÃ´mios')
### Primeira ordem.
ajuste1p <- gamlss(accel ~ times, data = mcycle)
lines(sort(mcycle$times), fitted(ajuste1p)[order(mcycle$times)], col = 'black', lwd = 2)
### Segunda ordem.
ajuste2p <- gamlss(accel ~ poly(times,2), data = mcycle)
lines(sort(mcycle$times), fitted(ajuste2p)[order(mcycle$times)], col = 'red', lwd = 2)
### Terceira ordem.
ajuste3p <- gamlss(accel ~ poly(times,5), data = mcycle)
lines(sort(mcycle$times), fitted(ajuste3p)[order(mcycle$times)], col = 'blue', lwd = 2)
### Ordem 10.
ajuste4p <- gamlss(accel ~ poly(times,10), data = mcycle)
lines(sort(mcycle$times), fitted(ajuste4p)[order(mcycle$times)], col = 'green', lwd = 2)
legend(x = "bottomright", lty = 1, lwd = 2, col = c('black', 'red', 'blue', 'green'),
legend = c('Ordem 1', 'Ordem 2', 'Ordem 5', 'Ordem 10'))
GAIC(ajuste1p, ajuste2p, ajuste3p, ajuste4p, k = 2) ### ComparaÃ§Ã£o via AIC.
GAIC(ajuste1p, ajuste2p, ajuste3p, ajuste4p, k = log(133)) ### ComparaÃ§Ã£o via BIC.
---
title: "4º CE231 - Modelos Markovianos"
subtitle: "IV Distribuição estacionária"
author: "XXXX"
date: "17 de Agosto de 2020"
output:
html_document: default
---
install.packages("nbastatR")
devtools::install_github("abresler/nbastatR")
install.packages("devtools")
library(devtools)
devtools::install_github("abresler/nbastatR")
library(nbastatR)
all_nba_players <-   get_nba_players_ids(league = "NBA", active_only = F)
devtools::install_github("abresler/nbastatR")
install.packages("gamlss.dist")
install.packages("gamlss.dist")
install.packages("gamlss.dist")
install.packages("gamlss.dist")
install.packages("gamlss.dist")
library(markovchain)
install.packages("gamlss.dist")
install.packages("gamlss.dist")
library(gamlss)
install.packages("gamlss.dist")
install.packages("gamlss.dist")
install.packages("gamlss.dist")
library(gamlss.dist)
library(gamlss.util)
eta.mu=37.01,
eta.sigma=-1.07,
eta.nu=1.89
mi=37.01,
eta.sigma=-1.07,
eta.nu=1.89
mi=37.01,
sigma=-1.07,
eta.nu=1.89
mi=37.01
sigma=-1.07
eta.nu=1.89
eta.tau=0.08
exp(sigma)
exp(eta.tau)
eta.tau
eta.mu=225.40, eta.sigma=4.50 e eta.nu=2.32
eta.mu=225.40
eta.sigma=4.50
eta.nu=2.32
exp(eta.sigma)
exp(eta.nu)
,
eta.mu=56.07
eta.sigma=1.42
eta.nu=-0.71
eta.tau=-0.01
exp(eta.sigma)
exp(eta.nu)
exp(eta.tau)
tinytex::install_tinytex()
library(gamlss)
0.1^2
mu <- 5
sig <- 0.1
esp_Y= (1 - sig)* mu
var_Y= (1 - sig)*(mu + sig * (mu^2))
esp_Y
var_Y
ZIP(mu.link = "log", sigma.link = "logit")
dZIP(x, mu = 5, sigma = 0.1, log = FALSE)
rZIP(n, mu = 5, sigma = 0.1)
rZIP(100, mu = 5, sigma = 0.1)
a) Y∼ZIP(μ=5,σ=0.1)
mu <- 5
sig <- 0.1
esp_Y= (1 - sig)* mu
var_Y= (1 - sig)*(mu + sig * (mu^2))
esp_Y
var_Y
esp_Y <- ((1 - sig)* mu) / (1-exp(-mu))
esp_Y <- ((1 - sig)* mu) / (1-exp(-mu))
var_Y= (1 + mu)*esp_Y -  esp_Y^2
esp_Y
var_Y
mu <- 4
sig <- 2
esp_Y <- mu
var_Y= mu + sig*mu^2
esp_Y
var_Y
dGA(24, mu = 4, sigma = 2, log = FALSE)
pGA(2, mu = 4, sigma = 2, lower.tail = TRUE, log.p = FALSE)
qGA(2, mu = 4, sigma = 2, lower.tail = TRUE, log.p = FALSE)
qGA(0.5, mu = 4, sigma = 2, lower.tail = TRUE, log.p = FALSE)
will <- rGA(100, mu = 4, sigma = 2)
summary(will)
will
dGA(2, mu = 4, sigma = 2, log = FALSE)
pGA(2, mu = 4, sigma = 2, lower.tail = TRUE, log.p = FALSE)
pGA(2, mu = 4, sigma = 2, lower.tail = FALSE, log.p = FALSE)
dGA(2, mu = 4, sigma = 2, log = FALSE)
pGA(2, mu = 4, sigma = 2, lower.tail = FALSE, log.p = FALSE)
pGG(2, mu=3, sigma=1, nu=2, lower.tail = TRUE, log.p = FALSE)
pGG(2, mu=3, sigma=1, nu=2, lower.tail = FALSE, log.p = FALSE)
dGG(2, mu=3, sigma=1, nu=2, log = FALSE)
will2<-rGG(1000, mu=3, sigma=1, nu=2)
will2
summary(will2)
dGG(2, mu=3, sigma=1, nu=2, log = FALSE)
pGG(2, mu=3, sigma=1, nu=2, lower.tail = FALSE, log.p = FALSE)
x<-2
x<-2
mu <-exp(1+(0.2*x)
mu <-exp(1+(0.2*x))
sig <- exp(2- (0.1*2))
mu <-exp(1+(0.2*x))
sig <- exp(2- (0.1*2))
nu <- ((-1)+(0.5*x))
dSI(x, mu = mu, sigma = sig, nu = nu, log = FALSE)
pSI(q, mu = mu, sigma = sig, nu = nu, lower.tail = TRUE, log.p = FALSE)
qSI(p, mu = mu, sigma = sig, nu = nu, lower.tail = TRUE, log.p = FALSE, max.value = 10000)
qSI(1, mu = mu, sigma = sig, nu = nu, lower.tail = TRUE, log.p = FALSE, max.value = 10000)
dSI(1, mu = mu, sigma = sig, nu = nu, log = FALSE)
pSI(1, mu = mu, sigma = sig, nu = nu, lower.tail = TRUE, log.p = FALSE)
mu <- 2
sig <- 0.4
esp_Y= (1 - sig)* mu
var_Y= (1 - sig)*(mu + sig * (mu^2))
esp_Y
var_Y
mu <- 2
sig <- 0.4
esp_Y <- ((1 - sig)* mu) / (1-exp(-mu))
var_Y= (1 + mu)*esp_Y -  esp_Y^2
esp_Y
var_Y
GG(mu.link = "log", sigma.link = "log", nu.link = "identity")
dGG(3, mu=2.5, sigma=2, nu=1, log = FALSE)
pGG(3, mu=2.5, sigma=2, nu=1, lower.tail = FALSE, log.p = FALSE)
pGG(3, mu=2.5, sigma=2, nu=1, lower.tail = TRUE, log.p = FALSE)
dGA(2, mu = 4, sigma = 1.5, log = FALSE)
pGA(2, mu = 4, sigma = 1.5, lower.tail = TRUE, log.p = FALSE)
qGA(0.5, mu = 4, sigma = 2, lower.tail = TRUE, log.p = FALSE)
pGA(2, mu = 4, sigma = 1.5, lower.tail = TRUE, log.p = FALSE)
dGA(2, mu = 4, sigma = 1.5, log = FALSE)
mu <-exp(1+(0.2*x))
sig <- exp(2- (0.1*x))
nu <- ((-1)+(0.5*x))
pSI(1, mu = mu, sigma = sig, nu = nu, lower.tail = TRUE, log.p = FALSE)
dSI(1, mu = mu, sigma = sig, nu = nu, log = FALSE)
knitr::opts_chunk$set(fig.width=8, fig.height=4, fig.path='Figs/',                     echo=F,warning=T,message=FALSE,cache=F,comment=NULL)
## Carregando dados e ajustando base
dados = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
dados
## Carregando dados e ajustando base
dados = read.csv("SolarPredictionAjustada.csv",sep = ",", dec = ".", header = TRUE)
dados
## Carregando dados e ajustando base
dados = read.csv("SolarPredictionAjustada.csv",sep = ";", dec = ".", header = TRUE)
dados
str(dados)
dados
str(dados)
setwd("~/Git/disciplinas/06 Semestre/CE225 - Modelo Lineares Generalizados/Trabalho/Binário")
install.packages(c("knitLatex", "knitr"))
install.packages(c("knitLatex", "knitr"))
install.packages(c("knitLatex", "knitr"))
knitr::opts_chunk$set(fig.width=8, fig.height=4, fig.path='Figs/',                     echo=F,warning=T,message=FALSE,cache=F,comment=NULL)
## Carregando dados e ajustando base
dados = read.csv("SolarPredictionAjustada.csv",sep = ";", dec = ".", header = TRUE)
str(dados)
## Carregando dados e ajustando base
dados = read.csv("SolarPredictionAjustada.csv",sep = ";", dec = ".", header = TRUE)
str(dados)
## Carregando dados e ajustando base
dados = read.csv("SolarPredictionAjustada.csv",sep = ";", dec = ".", header = TRUE)
str(dados)
summary(dados)
## Ajustando base
dados = dados[,-c(1,2,3,4,5,6)]
str(dados)
summary(dados)
dados$WindDirection <- as.factor(dados$WindDirection)
## Ajustando base
dados$WindDirection <- as.factor(dados$WindDirection)
dados = dados[,-c(1,2,3,4,5,6)]
str(dados)
summary(dados)
## Ajustando base
dados$WindDirection <- as.factor(dados$WindDirection)
dados$DiaNoite <- as.factor(dados$DiaNoite)
dados = dados[,-c(1,2,3,4,5,6)]
str(dados)
summary(dados)
## Ajustando base
dados$WindDirection <- as.factor(dados$WindDirection)
dados
dados$WindDirection <- as.factor(dados$WindDirection)
##LIMPESA DO HISTORICO DO R
rm(list = ls())
options(digits = 4)
##LIMPESA DO HISTORICO DO R
rm(list = ls())
options(digits = 4)
## PACOTES USADOS
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(corrplot)
library(gamlss)
library(gamlss.data)
library(gamlss.dist)
## Carregando dados
dados = read.csv("SolarPredictionAjustada.csv",sep = ";", dec = ".", header = TRUE)
str(dados)
summary(dados)
## Ajustando base
dados$WindDirection <- as.factor(dados$WindDirection)
dados$DiaNoite <- as.factor(dados$DiaNoite)
dados = dados[,-c(1,2,3,4,5,6)]
str(dados)
summary(dados)
knitr::opts_chunk$set(fig.width=8, fig.height=4, fig.path='Figs/',                     echo=F,warning=T,message=FALSE,cache=F,comment=NULL)
##LIMPESA DO HISTORICO DO R
rm(list = ls())
options(digits = 4)
## PACOTES USADOS
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(corrplot)
library(gamlss)
library(gamlss.data)
library(gamlss.dist)
## Carregando dados
dados = read.csv("SolarPredictionAjustada.csv",sep = ";", dec = ".", header = TRUE)
str(dados)
summary(dados)
## Ajustando base
dados$WindDirection <- as.factor(dados$WindDirection)
dados$DiaNoite <- as.factor(dados$DiaNoite)
dados$Mes <- as.factor(dados$Mes)
dados$Radiation
dados$Temperature
## Carregando dados
dados = read.csv("SolarPredictionAjustada.csv",sep = ";", dec = ".", header = TRUE)
str(dados)
summary(dados)
## Ajustando base
dados$WindDirection <- as.factor(dados$WindDirection)
dados$DiaNoite <- as.factor(dados$DiaNoite)
dados$Mes <- as.factor(dados$Mes)
dados$Radiation <- as.numeric(dados$Radiation)
dados$Temperature <- as.numeric(dados$Temperature)
dados$Pressure <- as.numeric(dados$Pressure)
dados$Humidity <- as.numeric(dados$Humidity)
dados$Speed <- as.numeric(dados$Speed)
dados = dados[,-c(1,2,3,4,5,6)]
str(dados)
summary(dados)
