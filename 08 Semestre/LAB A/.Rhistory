integrate(function(x) exp(-x), lower = 0, upper = 0.5)
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(1)
x[1]
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
install.packages("animation")
#############33333
N <- 500
x2 <- numeric(N)
x2[1] <- 0.5
set.seed(2019-10-11)
for(i in 2:N) {
y <- rnorm(1, 0.5, 0.25) # Distribuição proposta
alpha <- min((f(y) * g(x2[i - 1])) / (f(x2[i - 1]) * g(y)), 1)
u <- runif(1)
if(u <= alpha) {
x2[i] <- y
} else {
x2[i] <- x2[i - 1]
}
}
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(mean = 0,sd = 1)
x[1] <- rnorm(n = N, mean = 0,sd = 1)
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(n = N, mean = 0,sd = 1)
x[1]
x[1] <- rnorm(n = N, mean = 0,sd = 1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(mean = 0,sd = 1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(mean = 0,sd = 1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1000
x <- numeric(N)
x[1] <- rnorm(n = N, mean = 0,sd = 1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(mean = 0,sd = 1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(mean = 0,sd = 1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1000
x <- numeric(N)
x[1] <- rnorm(n = N, mean = 0,sd = 1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(n = N, mean = 0,sd = 1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(n = N, mean = 0,sd = 1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- runif(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- runif(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- runif(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dbeta(x, 2.7, 6.3)
g <- function(x) dunif(x, 0, 1)
## Máximo M
(M <- optimize(f = function(x) {f(x)/g(x)},
interval = c(0, 1), maximum = TRUE)$objective)
# [1] 2.669744
curve(f, from = 0, to = 1, col = 4)
curve(g, from = 0, to = 1, add = TRUE, lty = 2)
curve(M * g(x), add = TRUE, lty = 2, lwd = 2)
legend("right", legend = c("f(x)", "g(x)", "M g(x)"),
lty = c(1, 2, 2), col = c(4, 1, 1), lwd = c(1, 1, 2), bty = "n")
## Simula com número fixo
N <- 1e5
## Amostra da proposta U(0,1)
y <- runif(N)
## Amostra u também de U(0,1)
u <- runif(N)
## Calcula a razão
r <- f(y)/(M * g(y))
## x serão os valores de y onde u < r
x.ar <- y[u < r]
## Aceitados
ua <- u[u < r]
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- runif(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- runif(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- runif(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Taxa de aceitação - AR
1/M # teórica
# [1] 0.3745677
length(ua)/N
# [1] 0.37523
## Taxa de aceitação - MH
k/N
# [1] 0.5426
## Compara amostras com acumulada teórica
par(mfrow = c(1, 2))
plot(ecdf(x.ar), main = "Aceitação-rejeição")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
plot(ecdf(x), main = "Metropolis-Hastings")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
legend("right", legend = c("Empírica", "Teórica"),
lty = 1, col = 1:2, bty = "n")
rm(list=ls())
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dcauchy(x, 0, 1)
g <- function(x) dnorm(x, 0, 1)
## Máximo M
(M <- optimize(f = function(x) {f(x)/g(x)},
interval = c(0, 1), maximum = TRUE)$objective)
# [1] 2.669744
curve(f, from = 0, to = 1, col = 4)
curve(g, from = 0, to = 1, add = TRUE, lty = 2)
curve(M * g(x), add = TRUE, lty = 2, lwd = 2)
legend("right", legend = c("f(x)", "g(x)", "M g(x)"),
lty = c(1, 2, 2), col = c(4, 1, 1), lwd = c(1, 1, 2), bty = "n")
## Simula com número fixo
N <- 1e5
## Amostra da proposta U(0,1)
y <- rnorm(N)
## Amostra u também de U(0,1)
u <- rnorm(N)
## Calcula a razão
r <- f(y)/(M * g(y))
## x serão os valores de y onde u < r
x.ar <- y[u < r]
## Aceitados
ua <- u[u < r]
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Taxa de aceitação - AR
1/M # teórica
# [1] 0.3745677
length(ua)/N
# [1] 0.37523
## Taxa de aceitação - MH
k/N
# [1] 0.5426
## Compara amostras com acumulada teórica
par(mfrow = c(1, 2))
plot(ecdf(x.ar), main = "Aceitação-rejeição")
rm(list=ls())
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dcauchy(x, 0, 1)
g <- function(x) dnorm(x, 0, 1)
## Máximo M
(M <- optimize(f = function(x) {f(x)/g(x)},
interval = c(0, 1), maximum = TRUE)$objective)
# [1] 2.669744
curve(f, from = 0, to = 1, col = 4)
curve(g, from = 0, to = 1, add = TRUE, lty = 2)
curve(M * g(x), add = TRUE, lty = 2, lwd = 2)
legend("right", legend = c("f(x)", "g(x)", "M g(x)"),
lty = c(1, 2, 2), col = c(4, 1, 1), lwd = c(1, 1, 2), bty = "n")
## Simula com número fixo
N <- 1e5
## Amostra da proposta U(0,1)
y <- rnorm(N)
## Amostra u também de U(0,1)
u <- rnorm(N)
## Calcula a razão
r <- f(y)/(M * g(y))
## x serão os valores de y onde u < r
x.ar <- y[u < r]
## Aceitados
ua <- u[u < r]
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Taxa de aceitação - AR
1/M # teórica
# [1] 0.3745677
length(ua)/N
# [1] 0.37523
## Taxa de aceitação - MH
k/N
# [1] 0.5426
## Compara amostras com acumulada teórica
par(mfrow = c(1, 2))
plot(ecdf(x.ar), main = "Aceitação-rejeição")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
plot(ecdf(x), main = "Metropolis-Hastings")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
legend("right", legend = c("Empírica", "Teórica"),
lty = 1, col = 1:2, bty = "n")
## Compara autocorrelação
acf(x.ar, main = "Aceitação-rejeição")
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dcauchy(x, 0, 1)
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dcauchy(x, 0, 1)
g <- function(x) dnorm(x, 0, 1)
## Máximo M
(M <- optimize(f = function(x) {f(x)/g(x)},
interval = c(0, 1), maximum = TRUE)$objective)
# [1] 2.669744
curve(f, from = 0, to = 1, col = 4)
curve(g, from = 0, to = 1, add = TRUE, lty = 2)
curve(M * g(x), add = TRUE, lty = 2, lwd = 2)
legend("right", legend = c("f(x)", "g(x)", "M g(x)"),
lty = c(1, 2, 2), col = c(4, 1, 1), lwd = c(1, 1, 2), bty = "n")
## Simula com número fixo
N <- 1e5
N
## Amostra da proposta U(0,1)
y <- rnorm(N)
## Amostra u também de U(0,1)
u <- rnorm(N)
## Calcula a razão
r <- f(y)/(M * g(y))
## x serão os valores de y onde u < r
x.ar <- y[u < r]
## Aceitados
ua <- u[u < r]
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Taxa de aceitação - AR
1/M # teórica
# [1] 0.3745677
length(ua)/N
# [1] 0.37523
## Taxa de aceitação - MH
k/N
# [1] 0.5426
## Compara amostras com acumulada teórica
par(mfrow = c(1, 2))
plot(ecdf(x.ar), main = "Aceitação-rejeição")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
plot(ecdf(x), main = "Metropolis-Hastings")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
legend("right", legend = c("Empírica", "Teórica"),
lty = 1, col = 1:2, bty = "n")
## Compara autocorrelação
acf(x.ar, main = "Aceitação-rejeição")
acf(x, main = "Metropolis-Hastings")
## Compara as duas cadeias
par(mfrow = c(2, 1))
plot.ts(x.ar[5000:5200], main = "Aceitação-rejeição")
plot.ts(x[5000:5200], main = "Metropolis-Hastings")
par(mfrow = c(1, 1))
Call:
rpart(formula = Rating ~ ., data = db[, -1], control = list(minsplit = 5,
cp = 0.007, maxcompete = 0, maxsurrogate = 0))
setwd("~/Documentos/Git/disciplinas/08 Semestre/CE075 - Analise de Dados Longitudinais/Trabalho")
setwd("~/Documentos/Git/disciplinas/08 Semestre/CE075 - Analise de Dados Longitudinais/Trabalho")
## Dados observados
x <- c(4.1, 8.3, 2.9, 10.8, 9.5)
y <- c(3.7, 5.1, 1.0, 7.7, 8.9)
da <- data.frame(vals = c(x, y),
id = rep(c("x", "y"), each = 5))
da
## Compara médias
with(da, tapply(vals, id, mean))
#    x    y
# 7.12 5.28
(obsdiff <- with(da, abs(diff(tapply(vals, id, mean)))))
## Teste-t tradicional
t.test(vals ~ id, data = da, var.equal = TRUE)
## Número possível de permutações por grupo
factorial(length(x))
# [1] 120
factorial(length(y))
## A permutação dentro de cada grupo não faz sentido, pois as médias não
## serão alteradas
xperm <- gtools::permutations(n = length(x), r = length(x), v = x)
str(xperm)
#  num [1:120, 1:5] 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 ...
sort(x)
# [1]  2.9  4.1  8.3  9.5 10.8
head(xperm)
#      [,1] [,2] [,3] [,4] [,5]
# [1,]  2.9  4.1  8.3  9.5 10.8
# [2,]  2.9  4.1  8.3 10.8  9.5
# [3,]  2.9  4.1  9.5  8.3 10.8
# [4,]  2.9  4.1  9.5 10.8  8.3
# [5,]  2.9  4.1 10.8  8.3  9.5
# [6,]  2.9  4.1 10.8  9.5  8.3
tail(xperm)
#        [,1] [,2] [,3] [,4] [,5]
# [115,] 10.8  9.5  2.9  4.1  8.3
# [116,] 10.8  9.5  2.9  8.3  4.1
# [117,] 10.8  9.5  4.1  2.9  8.3
# [118,] 10.8  9.5  4.1  8.3  2.9
# [119,] 10.8  9.5  8.3  2.9  4.1
# [120,] 10.8  9.5  8.3  4.1  2.9
yperm <- gtools::permutations(n = length(y), r = length(y), v = y)
str(yperm)
#  num [1:120, 1:5] 1 1 1 1 1 1 1 1 1 1 ...
sort(y)
# [1] 1.0 3.7 5.1 7.7 8.9
head(yperm)
#      [,1] [,2] [,3] [,4] [,5]
# [1,]    1  3.7  5.1  7.7  8.9
# [2,]    1  3.7  5.1  8.9  7.7
# [3,]    1  3.7  7.7  5.1  8.9
# [4,]    1  3.7  7.7  8.9  5.1
# [5,]    1  3.7  8.9  5.1  7.7
# [6,]    1  3.7  8.9  7.7  5.1
tail(yperm)
#        [,1] [,2] [,3] [,4] [,5]
# [115,]  8.9  7.7  1.0  3.7  5.1
# [116,]  8.9  7.7  1.0  5.1  3.7
# [117,]  8.9  7.7  3.7  1.0  5.1
# [118,]  8.9  7.7  3.7  5.1  1.0
# [119,]  8.9  7.7  5.1  1.0  3.7
# [120,]  8.9  7.7  5.1  3.7  1.0
## Diferença entre médias para todas as permutações
xydiff <- numeric(nrow(xperm))
for(i in 1:nrow(xperm)) {
xydiff[i] <- mean(xperm[i, ]) - mean(yperm[i, ])
}
str(xydiff)
#  num [1:120] 1.84 1.84 1.84 1.84 1.84 1.84 1.84 1.84 1.84 1.84 ...
summary(xydiff)
## Portanto, a permutação deve ser feita entre os grupos, ou seja,
## alternando todos os valores possíveis entre os dois grupos
xy <- c(x, y)
## Mesmo em um caso simples como, esse, onde n = 10, já vimos que o
## número total de permutações possíveis pode ser muito grande, o que
## faz com que esse processo fique inviável computacionalmente.
## A ideia então é fazer um grande número de permutações aleatórias e
## fazer o mesmo cálculo. Isso pode ser feito retirando-se amostra COM
## REPOSIÇÃO da amostra conjunta (concatenando os dois grupos)
## Usando amostras sem reposição
N <- 10000
xydiff <- numeric(N)
for(i in 1:N) {
xydiff[i] <- diff(tapply(sample(xy), da$id, mean))
}
str(xydiff)
#  num [1:10000] 0.36 1.36 -0.16 -2.96 -1.72 ...
summary(xydiff)
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# -5.6800 -1.4400  0.0000  0.0113  1.4800  5.6800
hist(xydiff)
## Usando o mesmo exemplo, mas agora calculando a correlação entre os
## grupos
## Correlação observada. NOTE que é necessário usar a correlação (de
## postos) de Spearman
cor(x, y, method = "pearson")
# [1] 0.9228669
cor(x, y, method = "kendall")
# [1] 0.8
(obscor <- cor(x, y, method = "spearman"))
setwd("~/Documentos/Git/Projetos/Biologia/Apresentação Inicial")
setwd("~/Documentos/Git/disciplinas/08 Semestre/LAB A")
