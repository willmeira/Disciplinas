fit2 <- glmer(Y ~ visit + treatment + visit:treatment - treatment + (1|patientID),
family = binomial)
summary(fit2)
# install.packages("geepack")
data("toenail", package = "HSAUR2")
install.packages("HSAUR2")
install.packages("lme4")
install.packages("geepack")
install.packages("toenail")
# install.packages("geepack")
data("toenail", package = "HSAUR2")
require(lme4)
require(geepack)
attach(toenail)
# install.packages("geepack")
data("toenail", package = "HSAUR2")
require(lme4)
require(geepack)
attach(toenail)
names(toenail)
Y    =ifelse(outcome=='none or mild',0,1)
Y
toenail
# install.packages("geepack")
data("toenail", package = "HSAUR2")
require(lme4)
require(geepack)
attach(toenail)
names(toenail)
Y    =ifelse(outcome=='none or mild',0,1)
fit1 <- geeglm(Y ~ visit + treatment + visit:treatment - treatment ,
family = binomial, id = patientID,corstr='exchangeable')
summary(fit1)
fit2 <- glmer(Y ~ visit + treatment + visit:treatment - treatment + (1|patientID),
family = binomial)
summary(fit2)
names(summary(fit2))
class(summary(fit2)$coefficients)
dim(summary(fit2)$coefficients)
# Quadratura
# 2 ,3 , 10, 20, 30, 50
parametros <- NULL
erros_p <- NULL
number <- c(2 ,3 , 10, 20, 30, 50)
i <- 1
while (i <= length(number)){
fit00 <- glmer(Y ~ visit + treatment + visit:treatment - treatment + (1|patientID),
family = binomial, nAGQ = number[i])
parametros <- rbind(parametros,summary(fit00)$coefficients[,1])
erros_p <- rbind(erros_p,summary(fit00)$coefficients[,2])
i <- i + 1
}
parametros <- as.data.frame(parametros)
erros_p <- as.data.frame(erros_p)
parametros$quadratura <- NA
erros_p$quadratura <- NA
i <- 1
while (i <= length(number)){
parametros[i,4] <- number[i]
erros_p[i,4] <- number[i]
i <- i + 1
}
parametros
erros_p
library(nlme)
library(ggplot2)
setwd("")#Mudar diretório aqui
datawide<-read.table("chumbo.txt",header=T)
datawide
datawide<-read.table("chumbo.txt",header=T)
datawide<-read.table("chumbo.txt",header=T)
datawide<-read.table("chumbo.txt",header=T)
datawide<-read.table("chumbo.txt",header=T)
datawide<-read.table("chumbo.txt",header=T)
cor(datawide[,3:6])
with(datawide, boxplot(Sem0,Sem1,Sem4,Sem6,ylab="pb (mg/dl)",xlab="Semana"))
axis(1, 1:4, c(0,1,4,6))
# Transformando o banco wide para longo
datalong<-reshape(data=datawide,direction="long", idvar="ID", varying = list(names(datawide)[3:6]), v.names="chumbo", time= c(0,1,4,6), timevar="tempo")
# Gráficos de perfis
p1=ggplot(datalong, aes(x=tempo, y=chumbo, color=Grupo)) + geom_point() +	theme_bw() +
geom_line(aes(group=ID),size=0.05) + theme(legend.position="top") +
scale_x_continuous(breaks=unique(datalong$tempo))
# Boxplots
p2=ggplot(datalong, aes(x=factor(tempo), y=chumbo, fill=Grupo)) + geom_boxplot(notch=TRUE) +
theme(legend.position="top")
# Gráfico de Interação
with(datalong, interaction.plot(tempo, Grupo, chumbo))
## MODELO 1
## Modelo linear de efeito fixo (com intercepto)
#Independente
datalong$tempo=as.factor(datalong$tempo)
out1.ind<-lm(chumbo ~  tempo*Grupo,data=datalong)
round(summary(out1.ind)$coef,3)
#Simetria Composta
out1.exch<-gls(chumbo ~  tempo*Grupo, correlation=corCompSymm (form=~1|ID),data=datalong)
round(coef(summary(out1.exch)),3)
#AR1
out1.ar1<-gls(chumbo ~  tempo*Grupo, correlation=corAR1 (form=~1|ID),data=datalong)
round(coef(summary(out1.ar1)),3)
#Não estruturada
out1.unst<-gls(chumbo ~  tempo*Grupo, correlation=corSymm (form=~1|ID),data=datalong)
round(coef(summary(out1.unst)),3)
## MODELO 2
## Modelo linear de efeito fixo (sem intercepto)
#      mais simples de comparar os grupos em cada tempo
#Independente
out2.ind<-lm(chumbo ~ tempo*Grupo -1,data=datalong)
round(summary(out2.ind)$coef,3)
#Simetria Composta
out2.exch<-gls(chumbo ~  tempo*Grupo -1, correlation=corCompSymm (form=~1|ID),data=datalong)
round(coef(summary(out2.exch)),3)
#AR1
out2.ar1<-gls(chumbo ~  tempo*Grupo -1, correlation=corAR1 (form=~1|ID),data=datalong)
round(coef(summary(out2.ar1)),3)
#Não estruturada
out2.unst<-gls(chumbo ~ tempo*Grupo -1, correlation=corSymm (form=~1|ID),data= datalong)
round(coef(summary(out2.unst)),3)
install.packages("jsonlite")
library(jsonlite)
knitr::opts_chunk$set(echo = TRUE)
s = c(rep(0,100), 10*exp(-(101:100)/20)*cos(2*pi*(101:200)/4))
x = s + rnorm(200)
plot.ts(x)
s
x
install.packages("pdftools")
library(reshape)
library(plyr)
library(nlme)
library(ggplot2)
library(geepack)
install.packages("reshape")
library(reshape)
datawide <-read.table("https://docs.ufpr.br/~jlpadilha/CE075/Datasets/chumbo.txt",header=TRUE)
datawide <-read.table("chumbo.txt",header=TRUE, dec = ".")
setwd("~/Documentos/Git/disciplinas/08 Semestre/CE075 - Analise de Dados Longitudinais/Aulas")
datawide <-read.table("chumbo.txt",header=TRUE, dec = ".")
head(datawide)
;
;
## Potthoff & Roy (1964) apresentaram um conjunto de dados de crescimento de 11 meninas e 16 meninos. As
## medidas referem-se à distância entre dois marcos faciais (do centro da pituitária à fissura do maxilar)
## em quatro idades (8, 10, 12 e 14 anos). O objetivo é descrever e comparar o crescimento de meninos e
## meninas.Análise ExploratóriaOs dados estão disponíveis noRno pacotemicee podem ser acessados como:
library(mice)
library(plyr)
library(ggplot2)
library(nlme)
library(geepack)
data(potthoffroy);head(potthoffroy)
install.packages("mice")
r <- httr::POST("http://cran.ocpu.io/praise/R/praise/json")
httr::content(r)
r
r <- httr::POST("http://162.243.174.54:3000/binance/usdt/btc")
httr.get::content(r)
r <- httr.get::POST("http://162.243.174.54:3000/binance/usdt/btc")
library(rjson)
install.packages("rjson")
r <- httr.get::POST("http://162.243.174.54:3000/binance/usdt/btc")
library(rjson)
install.packages("~/Documentos/Git/RJSONIO_1.3-1.2.tar.gz", repos = NULL, type = "source")
library(RJSONIO)
btc<-fromJSON("https://data.ny.gov/api/views/9a8c-vfzj/rows.json?accessType=DOWNLOAD")
btc
btc
btc
btc<-fromJSON("http://162.243.174.54:3000/binance/usdt/btc")
httr::GET("http://localhost:8888/solta")
httr::GET("http://localhost:8888/solta")
httr::GET("https://data.ny.gov/api/views/9a8c-vfzj/rows.json?accessType=DOWNLOAD")
httr::GET("http://162.243.174.54:3000/binance/usdt/btc")
btc<-fromJSON("http://162.243.174.54:3000/binance/list")
btc
str(btc)
typeof(btc)
class(btc)
btc2<-httr::GET("http://162.243.174.54:3000/binance/usdt/btc")
btc2
typeof(btc2)
class(btc2)
setwd("~/Documentos/Git/disciplinas/08 Semestre/CE017 - Series Temporais")
library(astsa)
btc
library(rjson)
json_data_frame <- as.data.frame(btc)
json_data_frame
typeof(json_data_frame)
class(json_data_frame)
str(json_data_frame)
json_file <- lapply(btc, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
json_file
str(json_file)
json_file <- lapply(btc2, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
install.packages("jsonlite")
library(jsonlite)
result <- fromJSON(file ="http://162.243.174.54:3000/binance/usdt/btc")
fromJSON(btc)
fromJSON(btc)
fromJSON(btc)
fromJSON(btc2)
fromJSON(btc2)
fromJSON(btc2)
data.frame(x = seq(0, 2, by = 0.1),
y1 = c(5.5, 7.2, 10.4, 7.4, 7.2, 9.1, 15.9, 12.7,
11.3, 14.4, 14.8, 17.1, 31.4, 17.5, 27.6, 19.6,
27.1, 21, 33.8, 30.2, 45.1),
y2 = c(0.8, 1.5, 2.6, 1.5, 1.4, 2.1, 3.9, 3.3, 3, 3.9,
4.2, 4.8, 6.9, 5.5, 7.3, 6.7, 8.2, 8.1, 10.2,
10.7, 12.8))
library(lattice)
library(latticeExtra)
xyplot(y1 + y2 ~ x, data = tb1, outer = TRUE, scales = "free")
x <-  seq(0, 2, by = 0.05)
# 1.
m1 <- lm(y1 ~ x, data = tb1)
logLik(m1)
plot(y1 ~ x, data = tb1)
grid1 <- data.frame(x = seq(0, 2, by = 0.05),
y1 = predict(m1, newdata = as.data.frame(x)))
lines(grid1, col = 2)
# 2.
m2 <- lm(y1 ~ x + I(x^2), data = tb1)
logLik(m2)
plot(y1 ~ x, data = tb1)
grid2 <- data.frame(x = seq(0, 2, by = 0.05),
y1 = predict(m2, newdata = as.data.frame(x)))
lines(grid2, col = 2)
lines(grid1, col = 1)
abline(v = c(0.5, 1.5))
# 3.
m3 <- lm(log(y1) ~ x, data = tb1)
logLik(m3) - sum(log(tb1$y1))
plot(y1 ~ x, data = tb1)
grid3 <- data.frame(x = seq(0, 2, by = 0.05),
y1 = exp(predict(m3, newdata = as.data.frame(x))))
lines(grid3, col = 2)
# 4.
m4 <- lm(sqrt(y1) ~ x, data = tb1)
logLik(m4) - sum(log((2*sqrt(tb1$y1))))
rm(list=ls())
data.frame(x = seq(0, 2, by = 0.1),
y1 = c(5.5, 7.2, 10.4, 7.4, 7.2, 9.1, 15.9, 12.7,
11.3, 14.4, 14.8, 17.1, 31.4, 17.5, 27.6, 19.6,
27.1, 21, 33.8, 30.2, 45.1),
y2 = c(0.8, 1.5, 2.6, 1.5, 1.4, 2.1, 3.9, 3.3, 3, 3.9,
4.2, 4.8, 6.9, 5.5, 7.3, 6.7, 8.2, 8.1, 10.2,
10.7, 12.8))
library(lattice)
library(latticeExtra)
xyplot(y1 + y2 ~ x, data = tb1, outer = TRUE, scales = "free")
rm(list=ls())
##
#Considere os dados dispon?veis no objeto tb1 criado com o c?digo R do bloco a seguir.
tb1 <- data.frame(x = seq(0, 2, by = 0.1),
y1 = c(5.5, 7.2, 10.4, 7.4, 7.2, 9.1, 15.9, 12.7,
11.3, 14.4, 14.8, 17.1, 31.4, 17.5, 27.6, 19.6,
27.1, 21, 33.8, 30.2, 45.1),
y2 = c(0.8, 1.5, 2.6, 1.5, 1.4, 2.1, 3.9, 3.3, 3, 3.9,
4.2, 4.8, 6.9, 5.5, 7.3, 6.7, 8.2, 8.1, 10.2,
10.7, 12.8))
library(lattice)
library(latticeExtra)
#Digrama de dispers?o.
xyplot(y1 + y2 ~ x, data = tb1, outer = TRUE, scales = "free")
# 01 - Modelo gaussiano para y1 com preditor linear em x e fun??o de liga??o can?nica.
m1 <- lm(y1 ~ x, data = tb1)
lm1 <- logLik(m1)
grid1 <- predict(m1, newdata = data.frame(x = seq(0, 2, 0.05)))                      # lm(y ~ x)
# 02 - Modelo gaussiano para y1 com preditor quadr?tico em x e fun??o de liga??o can?nica.
m2 <- lm(y1 ~ x + I(x^2), data = tb1)
lm2 <- logLik(m2)
grid2 <- predict(m2, newdata = data.frame(x = seq(0, 2, 0.05)))                      # lm(y ~ x + x?)
# 03 - Modelo gaussiano para log(y1) com preditor linear em x e fun??o de liga??o can?nica.
m3 <- lm(log(y1) ~ x, data = tb1)
lm3 <- logLik(m3) - sum(log(tb1$y1))
grid3 <- predict(m3, newdata = data.frame(x = seq(0, 2, 0.05)))                      # lm(log(y) ~ x)
# 03 - Modelo gaussiano para log(y1) com preditor linear em x e fun??o de liga??o can?nica.
m3 <- lm(log(y1) ~ x, data = tb1)
lm3 <- logLik(m3) - sum(log(tb1$y1))
# 04 - Modelo gaussiano para sqrt^y1 com preditor linear em x e fun??o de liga??o can?nica.
m4 <- lm(sqrt(y1) ~ x, data = tb1)
lm4 <- logLik(m4) - sum(log(2 * sqrt(tb1$y1)))
grid4 <- predict(m4, newdata = data.frame(x = seq(0, 2, 0.05)))                      # lm(sqrt(y) ~ x)
# 05 - Modelo gaussiano para BoxCox(y1)=(y1^L-1)/L com preditor linear em x e fun??o de liga??o can?nica. O valor de L ? o que otimiza
# a log-verossimilhan?a perfilhada.
l <- MASS::boxcox(tb1$y1 ~ tb1$x)
l <- l$x[which.max(l$y)]
abline(v = 0.5)
m5 <- lm((y1^l - 1)/l ~ x, data = tb1)
lm5 <- logLik(m5) - (1/l - 1) * sum(log(tb1$y1^l))
grid5 <- predict(m5, newdata = data.frame(x = seq(0, 2, 0.05)))                      # lm(BC(y) ~ x)
# 06 - Modelo gama para y1 com preditor linear em x e fun??o de liga??o can?nica.
m6 <- glm(y1 ~ x, data = tb1, family = Gamma)
lm6 <- logLik(m6)
grid6 <- predict(m6, newdata = data.frame(x = seq(0, 2, 0.05)), type = "response")   # glm(y ~ Gamma(x))
# 07 - Modelo gaussiano inverso para y1 com preditor linear em x e fun??o de liga??o can?nica.
m7 <- glm(y1 ~ x, data = tb1, family = inverse.gaussian)
lm7 <- logLik(m7)
grid7 <- predict(m7, newdata = data.frame(x = seq(0, 2, 0.05)), type = "response")   # glm(y ~ NormInv(x))
# 08 - Modelo gaussiano para y1 com preditor linear em x e fun??o de liga??o logar?tmica.
m8 <- glm(y1 ~ x, data = tb1, family = gaussian(link=log))
lm8 <- logLik(m8)
grid8 <- predict(m8, newdata = data.frame(x = seq(0, 2, 0.05)), type = "response")   # glm(y ~ LogNorm(x))
# Comparando Verossimilhan?as
veros <- c(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8)
modelo <- c("M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8")
df.vero <- data.frame(modelo, veros)
df.vero
######a. A log-verossimilhan?a do modelo 3 foi superior a do 1.
lm3>lm1
#b. A log-verossimilhan?a do modelo 4 foi superior a do 1.
lm4>lm1
#######c. A distribui??o considerada no modelo 6 ? mais apropriada para os dados que a do modelo 7.
AIC(m6) < AIC(m7)
lm6 > lm7
#######d. O uso da fun??o de liga??o logar?tmica no modelo 8 deu log-verossmilha?a inferior ao modelo 1 que usou fun??o de liga??o identitidade.
lm8<lm1
#e. Dentre os modelos que n?o transformaram a vari?vel resposta, a maior log-verossmilhan?a ? a do modelo 8.
# ********* 1,2,6,7,8 *********
veros <- c(lm1, lm2, lm6, lm7, lm8)
modelo <- c("M1", "M2", "M6", "M7", "M8")
df.vero <- data.frame(modelo, veros)
df.vero
max(df.vero$veros)
veros <- c(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8)
modelo <- c("M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8")
tb1
# Comparando Verossimilhan?as
veros <- c(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8)
modelo <- c("M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8")
df.vero <- data.frame(modelo, veros)
df.vero
