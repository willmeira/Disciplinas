lines(x, f2, col = 4, lwd = w)
pi
lines(x, f3, col = 5, lwd = w)
lines(x, f4, col = 6, lwd = w)
legend("topright", legend = c("g", 0:4),
col = 1:6, lwd = w, inset = 0.02)
plot(x, g, type = "l", main = "", ylab = "g(x)/f(x)",
ylim = c(0,3.2), lwd = w)
lines(x, g/f1, col = 3, lwd = w)
lines(x, g/f2, col = 4, lwd = w)
lines(x, g/f3, col = 5, lwd = w)
lines(x, g/f4, col = 6, lwd = w)
legend("topright", legend = c(0:4),
col = 2:6, lwd = w, inset = 0.02)
par(mfrow = c(1, 1))
#--------------------------------------------------
m <- 10000
theta.hat <- se <- numeric(5)
#--------------------------------------------------
m <- 10000
theta.hat <- se <- numeric(5)
g <- function(x) {
## exp(-x - log(1+x^2)) * (x > 0) * (x < 1)
exp(-x)/(1 + x^2) * (x > 0) * (x < 1)
}
x <- runif(m)     # usando f0
fg <- g(x)
theta.hat[1] <- mean(fg)
se[1] <- sd(fg)
x <- rexp(m, 1)   # usando f1
fg <- g(x) / exp(-x)
theta.hat[2] <- mean(fg)
se[2] <- sd(fg)
x <- rcauchy(m)   # usando f2
i <- c(which(x > 1), which(x < 0))
x[i] <- 2  # para evitar erros em g(x)
fg <- g(x) / dcauchy(x)
theta.hat[3] <- mean(fg)
se[3] <- sd(fg)
which(x > 1)
which(x < 0)
i
i
x[i]
dcauchy(x)
mean(fg)
theta.hat[3]
theta.hat
se[3] <- sd(fg)
u <- runif(m)     # f3, pelo método da inversa
x <- - log(1 - u * (1 - exp(-1)))
fg <- g(x) / (exp(-x) / (1 - exp(-1)))
theta.hat[4] <- mean(fg)
se[4] <- sd(fg)
u <- runif(m)    # f4, pelo método da inversa
x <- tan(pi * u / 4)
fg <- g(x) / (4 / ((1 + x^2) * pi))
theta.hat[5] <- mean(fg)
se[5] <- sd(fg)
rbind(theta.hat, se/sqrt(m))
rm(llist = ls())
rm(list = ls())
x <- seq(0, 1, .01)
w <- 2
## Obtem m valores da U(2,4)
m <- 10000
a <- 2; b <- 4
x <- runif(m, min = a, max = b)
x
## Calcula g(x)
theta.hat <- exp(-x)
## Calcula a média * (b - a)
(m.theta.hat <- (sum(theta.hat)/m) * (b - a))
## Obtem m valores da U(2,4)
m <- 10000
a <- 0; b <- 0.5
x <- runif(m, min = a, max = b)
## Calcula g(x)
theta.hat <- exp(-x)
## Calcula a média * (b - a)
(m.theta.hat <- (sum(theta.hat)/m) * (b - a))
## Solução analítica
(theta <- exp(-0) - exp(-0.5))
# [1] 0.1170196
## Integração numérica no R
integrate(function(x) exp(-x), lower = 0, upper = 0.5)
rm(list = ls())
#--------------------------------------------------
m <- 10000
theta.hat <- se <- numeric(5)
g <- function(x) {
## exp(-x - log(1+x^2)) * (x > 0) * (x < 1)
exp(-x) * (x > 0) * (x < 1)
}
x <- runif(m)     # usando f0
fg <- g(x)
theta.hat[1] <- mean(fg)
se[1] <- sd(fg)
x <- rexp(m, 0.5)   # usando f1
fg <- g(x) / exp(-x)
theta.hat[2] <- mean(fg)
se[2] <- sd(fg)
x <- rcauchy(m)   # usando f2
i <- c(which(x > 1), which(x < 0))
x[i] <- 2  # para evitar erros em g(x)
fg <- g(x) / dcauchy(x)
theta.hat[3] <- mean(fg)
se[3] <- sd(fg)
u <- runif(m)     # f3, pelo método da inversa
x <- - log(1 - u * (1 - exp(-1)))
fg <- g(x) / (exp(-x) / (1 - exp(-1)))
theta.hat[4] <- mean(fg)
se[4] <- sd(fg)
u <- runif(m)    # f4, pelo método da inversa
x <- tan(pi * u / 4)
fg <- g(x) / (4 / ((1 + x^2) * pi))
theta.hat[5] <- mean(fg)
se[5] <- sd(fg)
rbind(theta.hat, se/sqrt(m))
se[2]
#--------------------------------------------------
m <- 10000
theta.hat <- se <- numeric(5)
g <- function(x) {
## exp(-x - log(1+x^2)) * (x > 0) * (x < 1)
exp(-x) * (x > 0) * (x < 0.5)
}
x <- runif(m)     # usando f0
fg <- g(x)
theta.hat[1] <- mean(fg)
se[1] <- sd(fg)
x <- rexp(m, 0.5)   # usando f1
fg <- g(x) / exp(-x)
theta.hat[2] <- mean(fg)
se[2] <- sd(fg)
theta.hat[2]
se[2] <- sd(fg)
se[2]
## Obtem m valores da U(0,0.5)
m <- 10000
a <- 0; b <- 0.5
x <- runif(m, min = a, max = b)
## Calcula g(x)
theta.hat <- exp(-x)
## Calcula a média * (b - a)
(m.theta.hat <- (sum(theta.hat)/m) * (b - a))
## Solução analítica
(theta <- exp(-0) - exp(-0.5))
# [1] 0.1170196
## Integração numérica no R
integrate(function(x) exp(-x), lower = 0, upper = 0.5)
theta.hat <- se <- numeric(5)
g <- function(x) {
## exp(-x - log(1+x^2)) * (x > 0) * (x < 1)
exp(-x) * (x > 0) * (x < 0.5)
}
x <- rexp(m, 0.5)   # usando f1
fg <- g(x) / exp(-x)
theta.hat[2] <- mean(fg)
se[2] <- sd(fg)
theta.hat[2]
se[2]
########################################################################################
# Aula 04/10/2019 - Métodos de Monte Carlo
########################################################################################
rm(list = ls())
## Obtem m valores da U(0,1)
m <- 10000
(M <- optimize(f = function(x) {dexp(x, 1)/dexp(x, .5)},
interval = c(0, 50), maximum = TRUE)$objective)
curve(dexp(x, 1), from = 0, to = 10, col = 4, ylim = c(0, 1))
curve(dexp(x, 0.5), from = 0, to = 10, add = TRUE, lty = 2)
curve(M * dexp(x, .5), add = TRUE, lty = 2, lwd = 2)
#-----------------------------------------------------------------------
# Pacotes.
rm(list = ls())
library(tidyverse)
library(lme4)     # Funções para modelos de efeitos aleatórios.
library(lmerTest) # Complementar a lme4.
library(emmeans)  # Estimated marginal means.
url <- "https://raw.githubusercontent.com/pet-estatistica/labestData/devel/data-raw/PimentelPg185.txt"
da <- read_tsv(url)
da
da <- da %>%
mutate_at(c("bloc", "trat"), "factor")
da <- read_tsv(url)
da <- da %>%
mutate_at(c("bloc", "trat"), "factor")
attr(da, "spec") <- NULL
da
str(da)
summary(da)
# São 6 repetições de cada tratamento.
# O tamanho do bloco é 3.
addmargins(xtabs(~trat + bloc, data = da))
# Quantas vezes cada par ocorre junto.
by(data = da$trat,
INDICES = da$bloc,
FUN = function(x) {
apply(combn(sort(x), m = 2),
MARGIN = 2,
FUN = paste0,
collapse = "_")
}) %>%
flatten_chr() %>%
table()
# Obtém as coordenadas radiais para gráfico de conexão.
da <- da %>%
do({
k <- nlevels(.$trat)
a <- seq(0, 2 * pi, length.out = k + 1)[-(k + 1)]
cbind(.,
data.frame(coord_x = sin(a)[as.integer(.$trat)],
coord_y = cos(a)[as.integer(.$trat)]))
})
da
# Gráfico de conexão.
ext <- c(-1.2, 1.2)
ext
ggplot(data = da,
mapping = aes(coord_x, coord_y)) +
facet_wrap(facets = ~bloc, nrow = 2) +
geom_point() +
geom_polygon(fill = NA, color = "orange") +
geom_label(mapping = aes(label = trat)) +
expand_limits(x = ext, y = ext) +
coord_equal()
# Visualização dos dados.
ggplot(data = da,
mapping = aes(x = trat, y = y, color = bloc)) +
geom_point() +
stat_summary(mapping = aes(group = 1),
geom = "line",
fun.y = "mean") +
geom_text(mapping = aes(label = bloc),
hjust = 0,
nudge_x = 0.02,
show.legend = FALSE)
library(igraph)
edg <- by(data = da$trat,
INDICES = da$bloc,
FUN = combn,
m = 2) %>%
flatten_int()
ghp <- graph(edg, directed = FALSE)
plot(ghp,
layout = layout_in_circle,
edge.curved = FALSE)
# Visualização dos dados.
ggplot(data = da,
mapping = aes(x = trat, y = y, color = bloc)) +
geom_point() +
stat_summary(mapping = aes(group = 1),
geom = "line",
fun.y = "mean") +
geom_text(mapping = aes(label = bloc),
hjust = 0,
nudge_x = 0.02,
show.legend = FALSE)
# Ajuste do modelo de efeitos fixos para blocos.
m0 <- lm(y ~ bloc + trat,
data = da,
contrasts = list(bloc = contr.sum))
contr.sum
# Quadro de teste de F.
anova(m0)
# Estimativas dos parâmetros.
summary(m0)
70.922-45.856
str(summary(m0))
names(m0)
# Médias ajustadas marginais.
emm_m0 <- emmeans(m0, specs = ~trat)
emm_m0
# Quadro de teste de F.
anova(m0)
# Estimativas dos parâmetros.
summary(m0)
emm_m0
# Constrastes par a par, ou seja, contrastes de Tukey.
contrast(emm_m0, method = "tukey")
# Ajuste do modelo de efeito aleatório de bloc.
mm0 <- lmer(y ~ (1 | bloc) + trat, data = da)
# Quadro de teste de Wald.
anova(mm0)
# Quadro de teste de F.
anova(m0)
emm_m0
emm_m0
# Ajuste do modelo de efeito aleatório de bloc.
mm0 <- lmer(y ~ (1 | bloc) + trat, data = da)
# Quadro de teste de Wald.
anova(mm0)
# Quadro de teste de F.
anova(m0)
# Estimativas dos parâmetros.
summary(m0)
# Estimativas dos parâmetros.
summary(mm0, correlation = FALSE)
summary(mm)
summary(mm0)
# Estimativas dos parâmetros.
summary(mm0, correlation = FALSE)
# Extração das estimativas dos parâmetros de efeito fixo.
fixef(mm0)
fixef
# Extração das estimativas dos parâmetros de efeito fixo.
fixef(mm0)
# Extração das predições dos coeficientes de efeito aleatório.
ranef(mm0)
mm0
summary(mm0)
# Estimativas dos parâmetros.
summary(mm0, correlation = FALSE)
sb <- 4
b1 <- -1.6978
sb1 <- 0.3304
exp(b1+1.96*(4.3284))/(1+exp(b1+1.96*(4.3284)))
exp(b1-1.96*(4.3284))/(1+exp(b1-1.96*(4.3284)))
qnorm(p = 0.99)
rm(list = ls())
#install.packages("foreign")
library(foreign)
dados <- read.dta("toenail.dta")
setwd("~/Documentos/Git/disciplinas/08 Semestre/CE075 - Analise de Dados Longitudinais/Lista 02")
dados <- read.dta("toenail.dta")
dados$trt <- as.factor(dados$trt)
summary(dados)
str(dados)
#install.packages("geepack")
library(geepack)
gee <- geeglm(y~month+month*trt-trt,
family=binomial(link="logit"), data=dados, id=id,
corstr ="exchangeable", std.err="san.se")
summary(gee)
1-exp(-0.1713)
coef(gee)[2]
1-exp(-0.1713)
1-exp(-0.1713*2)
1-exp(-0.1713-0.077)
1-exp((-0.1713*2) + (-0.077*2))
coef(gee)[3]
1-exp(-0.077)
##----------------------------------------------------------------------------------------------------
## 12.1.4 - d) Gráfico de log(Odd) dos tratamentos em funç??o do m??s.
##----------------------------------------------------------------------------------------------------
# install.packages("lattice")
library(lattice)
tabela1 <- data.frame(grupo=rep(c("A","B"),each=19),
m??s=rep(c(0:18),times=2),
dimlogodd=c((coef(gee)[1]+coef(gee)[2]*0:18+coef(gee)[3]*0:18),
(coef(gee)[1]+coef(gee)[2]*0:18)))
# Estimativas dos parâmetros.
summary(mm0, correlation = FALSE)
#-----------------------------------------------------------------------
# Pacotes.
rm(list = ls())
library(tidyverse)
library(lme4)     # Funções para modelos de efeitos aleatórios.
library(lmerTest) # Complementar a lme4.
library(emmeans)  # Estimated marginal means.
url <- "https://raw.githubusercontent.com/pet-estatistica/labestData/devel/data-raw/PimentelPg185.txt"
da <- read_tsv(url)
da <- da %>%
mutate_at(c("bloc", "trat"), "factor")
attr(da, "spec") <- NULL
str(da)
summary(da)
# São 6 repetições de cada tratamento.
# O tamanho do bloco é 3.
addmargins(xtabs(~trat + bloc, data = da))
# Quantas vezes cada par ocorre junto.
by(data = da$trat,
INDICES = da$bloc,
FUN = function(x) {
apply(combn(sort(x), m = 2),
MARGIN = 2,
FUN = paste0,
collapse = "_")
}) %>%
flatten_chr() %>%
table()
# Obtém as coordenadas radiais para gráfico de conexão.
da <- da %>%
do({
k <- nlevels(.$trat)
a <- seq(0, 2 * pi, length.out = k + 1)[-(k + 1)]
cbind(.,
data.frame(coord_x = sin(a)[as.integer(.$trat)],
coord_y = cos(a)[as.integer(.$trat)]))
})
# Gráfico de conexão.
ext <- c(-1.2, 1.2)
ggplot(data = da,
mapping = aes(coord_x, coord_y)) +
facet_wrap(facets = ~bloc, nrow = 2) +
geom_point() +
geom_polygon(fill = NA, color = "orange") +
geom_label(mapping = aes(label = trat)) +
expand_limits(x = ext, y = ext) +
coord_equal()
# Visualização dos dados.
ggplot(data = da,
mapping = aes(x = trat, y = y, color = bloc)) +
geom_point() +
stat_summary(mapping = aes(group = 1),
geom = "line",
fun.y = "mean") +
geom_text(mapping = aes(label = bloc),
hjust = 0,
nudge_x = 0.02,
show.legend = FALSE)
library(igraph)
edg <- by(data = da$trat,
INDICES = da$bloc,
FUN = combn,
m = 2) %>%
flatten_int()
ghp <- graph(edg, directed = FALSE)
plot(ghp,
layout = layout_in_circle,
edge.curved = FALSE)
# Ajuste do modelo de efeitos fixos para blocos.
m0 <- lm(y ~ bloc + trat,
data = da,
contrasts = list(bloc =
))
# Quadro de teste de F.
anova(m0)
# Estimativas dos parâmetros.
summary(m0)
# Médias ajustadas marginais.
emm_m0 <- emmeans(m0, specs = ~trat)
emm_m0
# Constrastes par a par, ou seja, contrastes de Tukey.
contrast(emm_m0, method = "tukey")
# Ajuste do modelo de efeito aleatório de bloc.
mm0 <- lmer(y ~ (1 | bloc) + trat, data = da)
# Quadro de teste de Wald.
anova(mm0)
# Estimativas dos parâmetros.
summary(mm0, correlation = FALSE)
# Extração das estimativas dos parâmetros de efeito fixo.
fixef(mm0)
# Extração das predições dos coeficientes de efeito aleatório.
ranef(mm0)
summary(mm0)
# Componentes de variância.
VarCorr(mm0)
# Valores preditos individuais: X\beta + Zb.
#   formula(mm0, fixed.only = TRUE)
#   formula(mm0, random.only = TRUE)
model.matrix(~trat, data = da) %*% fixef(mm0) +
model.matrix(~0 + bloc, data = da) %*% ranef(mm0)$bloc$`(Intercept)`
predict(mm0)
# Valores preditos populacionais: X\beta.
unique(model.matrix(~trat, data = da)) %*% fixef(mm0)
unique(predict(mm0, re.form = ~0))
# Veja as matrizes X e Z extraídas do modelo ajustado.
model.matrix(mm0, type = "fixed")  # X.
model.matrix(mm0, type = "random") # Z.
# Médias marginais ajustadas.
emm_mm0 <- emmeans(mm0, specs = ~trat)
emm_mm0
# Constrastes par a par, ou seja, contrastes de Tukey.
contrast(emm_mm0, method = "pairwise")
# O efeito de encolhimento (shirinkage).
ef_mm0 <- c(ranef(mm0)$bloc$`(Intercept)`)
ef_m0 <- coef(m0)[m0$assign == 1]
# Ajuste do modelo de efeitos fixos para blocos.
m0 <- lm(y ~ bloc + trat,
data = da,
contrasts = list(bloc =
))
# Quadro de teste de F.
anova(m0)
# Estimativas dos parâmetros.
summary(m0)
# Ajuste do modelo de efeitos fixos para blocos.
m0 <- lm(y ~ bloc + trat,
data = da,
contrasts = list(bloc =
))
# Ajuste do modelo de efeitos fixos para blocos.
m0 <- lm(y ~ bloc + trat,
data = da,
contrasts = list(bloc = contr.sum))
# Quadro de teste de F.
anova(m0)
# Estimativas dos parâmetros.
summary(m0)
# Médias ajustadas marginais.
emm_m0 <- emmeans(m0, specs = ~trat)
emm_m0
# Constrastes par a par, ou seja, contrastes de Tukey.
contrast(emm_m0, method = "tukey")
# Ajuste do modelo de efeito aleatório de bloc.
mm0 <- lmer(y ~ (1 | bloc) + trat, data = da)
# O efeito de encolhimento (shirinkage).
ef_mm0 <- c(ranef(mm0)$bloc$`(Intercept)`)
ef_m0 <- coef(m0)[m0$assign == 1]
ef_m0 <- c(ef_m0, bloc10 = -sum(ef_m0))
# Estimativas ao lado das predições para o efeito de blocos.
cbind(ef_m0, ef_mm0)
iris
dados<-iris
str(dados)
summary(dados)
# Ajuste do modelo de efeito aleatório de bloc.
m1 <- lmer(Sepal.Length ~ (1|Species)+Sepal.Width + Petal.Length + Petal.Width,
data = dados)
summary(m1)
