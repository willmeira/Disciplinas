N <- 1e5
x <- numeric(N)
x[1] <- rnorm(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(mean = 0,sd = 1)
x[1] <- rnorm(n = N, mean = 0,sd = 1)
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(n = N, mean = 0,sd = 1)
x[1]
x[1] <- rnorm(n = N, mean = 0,sd = 1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(mean = 0,sd = 1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(mean = 0,sd = 1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1000
x <- numeric(N)
x[1] <- rnorm(n = N, mean = 0,sd = 1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(mean = 0,sd = 1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(mean = 0,sd = 1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
#
# Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
# Beta(α=2.7,β=6.3), com uma distribuição proposta U(0,1).
N <- 1000
x <- numeric(N)
x[1] <- rnorm(n = N, mean = 0,sd = 1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(n = N, mean = 0,sd = 1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(n = N, mean = 0,sd = 1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- runif(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- runif(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- runif(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dbeta(x, 2.7, 6.3)
g <- function(x) dunif(x, 0, 1)
## Máximo M
(M <- optimize(f = function(x) {f(x)/g(x)},
interval = c(0, 1), maximum = TRUE)$objective)
# [1] 2.669744
curve(f, from = 0, to = 1, col = 4)
curve(g, from = 0, to = 1, add = TRUE, lty = 2)
curve(M * g(x), add = TRUE, lty = 2, lwd = 2)
legend("right", legend = c("f(x)", "g(x)", "M g(x)"),
lty = c(1, 2, 2), col = c(4, 1, 1), lwd = c(1, 1, 2), bty = "n")
## Simula com número fixo
N <- 1e5
## Amostra da proposta U(0,1)
y <- runif(N)
## Amostra u também de U(0,1)
u <- runif(N)
## Calcula a razão
r <- f(y)/(M * g(y))
## x serão os valores de y onde u < r
x.ar <- y[u < r]
## Aceitados
ua <- u[u < r]
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- runif(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- runif(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- runif(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Taxa de aceitação - AR
1/M # teórica
# [1] 0.3745677
length(ua)/N
# [1] 0.37523
## Taxa de aceitação - MH
k/N
# [1] 0.5426
## Compara amostras com acumulada teórica
par(mfrow = c(1, 2))
plot(ecdf(x.ar), main = "Aceitação-rejeição")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
plot(ecdf(x), main = "Metropolis-Hastings")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
legend("right", legend = c("Empírica", "Teórica"),
lty = 1, col = 1:2, bty = "n")
rm(list=ls())
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dcauchy(x, 0, 1)
g <- function(x) dnorm(x, 0, 1)
## Máximo M
(M <- optimize(f = function(x) {f(x)/g(x)},
interval = c(0, 1), maximum = TRUE)$objective)
# [1] 2.669744
curve(f, from = 0, to = 1, col = 4)
curve(g, from = 0, to = 1, add = TRUE, lty = 2)
curve(M * g(x), add = TRUE, lty = 2, lwd = 2)
legend("right", legend = c("f(x)", "g(x)", "M g(x)"),
lty = c(1, 2, 2), col = c(4, 1, 1), lwd = c(1, 1, 2), bty = "n")
## Simula com número fixo
N <- 1e5
## Amostra da proposta U(0,1)
y <- rnorm(N)
## Amostra u também de U(0,1)
u <- rnorm(N)
## Calcula a razão
r <- f(y)/(M * g(y))
## x serão os valores de y onde u < r
x.ar <- y[u < r]
## Aceitados
ua <- u[u < r]
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Taxa de aceitação - AR
1/M # teórica
# [1] 0.3745677
length(ua)/N
# [1] 0.37523
## Taxa de aceitação - MH
k/N
# [1] 0.5426
## Compara amostras com acumulada teórica
par(mfrow = c(1, 2))
plot(ecdf(x.ar), main = "Aceitação-rejeição")
rm(list=ls())
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dcauchy(x, 0, 1)
g <- function(x) dnorm(x, 0, 1)
## Máximo M
(M <- optimize(f = function(x) {f(x)/g(x)},
interval = c(0, 1), maximum = TRUE)$objective)
# [1] 2.669744
curve(f, from = 0, to = 1, col = 4)
curve(g, from = 0, to = 1, add = TRUE, lty = 2)
curve(M * g(x), add = TRUE, lty = 2, lwd = 2)
legend("right", legend = c("f(x)", "g(x)", "M g(x)"),
lty = c(1, 2, 2), col = c(4, 1, 1), lwd = c(1, 1, 2), bty = "n")
## Simula com número fixo
N <- 1e5
## Amostra da proposta U(0,1)
y <- rnorm(N)
## Amostra u também de U(0,1)
u <- rnorm(N)
## Calcula a razão
r <- f(y)/(M * g(y))
## x serão os valores de y onde u < r
x.ar <- y[u < r]
## Aceitados
ua <- u[u < r]
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Taxa de aceitação - AR
1/M # teórica
# [1] 0.3745677
length(ua)/N
# [1] 0.37523
## Taxa de aceitação - MH
k/N
# [1] 0.5426
## Compara amostras com acumulada teórica
par(mfrow = c(1, 2))
plot(ecdf(x.ar), main = "Aceitação-rejeição")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
plot(ecdf(x), main = "Metropolis-Hastings")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
legend("right", legend = c("Empírica", "Teórica"),
lty = 1, col = 1:2, bty = "n")
## Compara autocorrelação
acf(x.ar, main = "Aceitação-rejeição")
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dcauchy(x, 0, 1)
## Aceitação-rejeição --------------------------------------------------
## Define funções
f <- function(x) dcauchy(x, 0, 1)
g <- function(x) dnorm(x, 0, 1)
## Máximo M
(M <- optimize(f = function(x) {f(x)/g(x)},
interval = c(0, 1), maximum = TRUE)$objective)
# [1] 2.669744
curve(f, from = 0, to = 1, col = 4)
curve(g, from = 0, to = 1, add = TRUE, lty = 2)
curve(M * g(x), add = TRUE, lty = 2, lwd = 2)
legend("right", legend = c("f(x)", "g(x)", "M g(x)"),
lty = c(1, 2, 2), col = c(4, 1, 1), lwd = c(1, 1, 2), bty = "n")
## Simula com número fixo
N <- 1e5
N
## Amostra da proposta U(0,1)
y <- rnorm(N)
## Amostra u também de U(0,1)
u <- rnorm(N)
## Calcula a razão
r <- f(y)/(M * g(y))
## x serão os valores de y onde u < r
x.ar <- y[u < r]
## Aceitados
ua <- u[u < r]
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
## Metropolis-Hastings -------------------------------------------------
## Simula com número fixo
N <- 1e5
x <- numeric(N)
x[1] <- rnorm(1)
k <- 0 # para contar quantos foram aceitos
for (i in 2:N) {
y <- rnorm(1)
num <- f(y) * g(x[i - 1])
den <- f(x[i - 1]) * g(y)
alpha <- num/den
u <- rnorm(1)
if (u <= alpha) {
x[i] <- y
} else {
x[i] <- x[i - 1]
k <- k + 1     # contagem doa aceitos
}
}
## Taxa de aceitação - AR
1/M # teórica
# [1] 0.3745677
length(ua)/N
# [1] 0.37523
## Taxa de aceitação - MH
k/N
# [1] 0.5426
## Compara amostras com acumulada teórica
par(mfrow = c(1, 2))
plot(ecdf(x.ar), main = "Aceitação-rejeição")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
plot(ecdf(x), main = "Metropolis-Hastings")
curve(pbeta(x, 2.7, 6.3), add = TRUE, from = 0, to = 1, col = 2)
legend("right", legend = c("Empírica", "Teórica"),
lty = 1, col = 1:2, bty = "n")
## Compara autocorrelação
acf(x.ar, main = "Aceitação-rejeição")
acf(x, main = "Metropolis-Hastings")
## Compara as duas cadeias
par(mfrow = c(2, 1))
plot.ts(x.ar[5000:5200], main = "Aceitação-rejeição")
plot.ts(x[5000:5200], main = "Metropolis-Hastings")
par(mfrow = c(1, 1))
Call:
rpart(formula = Rating ~ ., data = db[, -1], control = list(minsplit = 5,
cp = 0.007, maxcompete = 0, maxsurrogate = 0))
setwd("~/Documentos/Git/disciplinas/08 Semestre/CE075 - Analise de Dados Longitudinais")
library(plyr);library(ordinal);library(multgee)ds <-read.dta("arthritis.dta")head(ds)
library(foreign);
library(plyr);
library(ordinal);
library(multgee)
install.packages("ordinal")
install.packages("multgee")
library(foreign);
library(plyr);
library(ordinal);
library(multgee)
ds <-read.dta("arthritis.dta")head(ds)
ds <-read.dta("arthritis.dta")
head(ds)
dslong <-reshape(ds, idvar="id", varying=c("y1","y2","y3","y4"),
v.names="y",timevar="time", time=1:4, direction="long")
dslong <-arrange(dslong, id, time);head(dslong)
attach(dslong)month <- 2*(time-1);
attach(dslong)
month <- 2*(time-1);
sqrtmonth <- month^0.5
## Comparamos as proporções das categorias de resposta por grupo:
round(100*prop.table((table(time[trt==0],y[trt==0])),1),2)#proporções placebo
round(100*prop.table((table(time[trt==1],y[trt==1])),1),2)#proporções auranofina
## A seguir são mostrados os resultados do ajuste de máxima verossimilhança.
fit1 <-clmm(ordered(y)~trt+sqrtmonth+trt:sqrtmonth+(1|id), nAGQ = 50)
summary(fit1)#considerar o sinal inverso para \beta
## A seguir são mostrados os resultados do ajuste de máxima verossimilhança.
fit1 <-clmm(ordered(y)~trt+sqrtmonth+trt:sqrtmonth+(1|id), nAGQ = 50)
ds <-read.dta("arthritis.dta")
dslong <-reshape(ds, idvar="id", varying=c("y1","y2","y3","y4"),
v.names="y",timevar="time", time=1:4, direction="long")
dslong
ds
dslong <-arrange(dslong, id, time);head(dslong)
dslong
attach(dslong)
dslong
month <- 2*(time-1);
sqrtmonth <- month^0.5
## Comparamos as proporções das categorias de resposta por grupo:
round(100*prop.table((table(time[trt==0],y[trt==0])),1),2)#proporções placebo
round(100*prop.table((table(time[trt==1],y[trt==1])),1),2)#proporções auranofina
## A seguir são mostrados os resultados do ajuste de máxima verossimilhança.
fit1 <-clmm(ordered(y)~trt+sqrtmonth+trt:sqrtmonth+(1|id), nAGQ = 50)
trt
sqrtmonth
rm(list=ls())
library(foreign);
library(plyr);
library(ordinal);
library(multgee)
ds <-read.dta("arthritis.dta")
head(ds)
install.packages("multgee")
dslong <-reshape(ds, idvar="id", varying=c("y1","y2","y3","y4"),
v.names="y",timevar="time", time=1:4, direction="long")
dslong <-arrange(dslong, id, time);head(dslong)
attach(dslong)
month <- 2*(time-1);
sqrtmonth <- month^0.5
time
dslong <-reshape(ds, idvar="id", varying=c("y1","y2","y3","y4"),
v.names="y",timevar="time", time=1:4, direction="long")
dslong <-arrange(dslong, id, time);head(dslong)
attach(dslong)
month <- 2*(time-1);
sqrtmonth <- month^0.5
## Comparamos as proporções das categorias de resposta por grupo:
round(100*prop.table((table(time[trt==0],y[trt==0])),1),2)#proporções placebo
round(100*prop.table((table(time[trt==1],y[trt==1])),1),2)#proporções auranofina
## A seguir são mostrados os resultados do ajuste de máxima verossimilhança.
fit1 <-clmm(ordered(y)~trt+sqrtmonth+trt:sqrtmonth+(1|id), nAGQ = 50)
summary(fit1)#considerar o sinal inverso para \beta
fit.gee <-ordLORgee(y~trt+sqrtmonth+trt:sqrtmonth, id=id, LORstr = "uniform")
summary(fit.gee)
install.packages(c("akima", "gam"))
install.packages("faraway")
rm(list = ls())
rm(list = objects())
library(lattice)
library(latticeExtra)
# Endereço das tabelas.
pre <- "https://raw.githubusercontent.com/walmes/EACS/master/data-raw/"
files <- c(hidric = "teca_crapar.csv",
quimic = "teca_qui.csv",
prod = "teca_arv.csv")
urls <- paste0(pre, files)
names(urls) <- names(files)
# Lista com as tabelas.
da <- sapply(urls,
FUN = read.table,
header = TRUE,
sep = ";",
simplify = FALSE)
str(da)
# Manipular as tabelas para fazer o merge.
da$quimic <- subset(da$quimic, cam == "[0, 5)", select = -cam)
da$hidric <- subset(da$hidric, cam == "[0, 5)", select = -c(cam, cad))
da$prod <- subset(da$prod, select = c(loc, prod))
str(da)
# Aplica o merge recursivamente.
teca <- Reduce(f = merge, x = da)
# Elimina a variável identificadora (agora desnecessária).
teca$loc <- NULL
# Estrutura da tabela.
str(teca)
u <- "http://www.leg.ufpr.br/~walmes/data/ap_venda7bairros_cwb_210314.txt"
ap <- read.table(file = u, header = TRUE, sep = "\t")
# Usar o log do preço e da metragem.
ap <- transform(ap,
larea = log10(area),
lpreco = log10(preco),
preco = NULL,
area = NULL)
ap <- ap[-c(1966L, 2696L, 3267L), ]
ap <- subset(ap, lpreco > 4)
rownames(ap) <- NULL
str(ap)
xyplot(lpreco ~ larea | cut(vagas, c(0:3, Inf)),
data = ap,
as.table = TRUE)
xyplot(lpreco ~ larea | bairro,
data = ap,
as.table = TRUE) +
layer(panel.smoother(...))
library(rpart)
library(rpart.plot)
# Ajuste do modelo.
m0 <- rpart(prod ~ ., data = teca)
# Resumo do ajuste.
summary(m0)
# Visualização da árvore de regressão.
rpart.plot(m0)
# Valores preditos.
predict(m0)
# Valores preditos (médias em cada região).
unique(sort(predict(m0)))
table(sort(predict(m0)))
m1 <- rpart(prod ~ .,
data = teca,
control = list(minsplit = 5,
cp = 0.001))
rpart.plot(m1)
unique(sort(predict(m1)))
