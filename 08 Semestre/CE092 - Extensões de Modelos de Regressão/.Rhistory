names(toenail)
Y    =ifelse(outcome=='none or mild',0,1)
Y
toenail
# install.packages("geepack")
data("toenail", package = "HSAUR2")
require(lme4)
require(geepack)
attach(toenail)
names(toenail)
Y    =ifelse(outcome=='none or mild',0,1)
fit1 <- geeglm(Y ~ visit + treatment + visit:treatment - treatment ,
family = binomial, id = patientID,corstr='exchangeable')
summary(fit1)
fit2 <- glmer(Y ~ visit + treatment + visit:treatment - treatment + (1|patientID),
family = binomial)
summary(fit2)
names(summary(fit2))
class(summary(fit2)$coefficients)
dim(summary(fit2)$coefficients)
# Quadratura
# 2 ,3 , 10, 20, 30, 50
parametros <- NULL
erros_p <- NULL
number <- c(2 ,3 , 10, 20, 30, 50)
i <- 1
while (i <= length(number)){
fit00 <- glmer(Y ~ visit + treatment + visit:treatment - treatment + (1|patientID),
family = binomial, nAGQ = number[i])
parametros <- rbind(parametros,summary(fit00)$coefficients[,1])
erros_p <- rbind(erros_p,summary(fit00)$coefficients[,2])
i <- i + 1
}
parametros <- as.data.frame(parametros)
erros_p <- as.data.frame(erros_p)
parametros$quadratura <- NA
erros_p$quadratura <- NA
i <- 1
while (i <= length(number)){
parametros[i,4] <- number[i]
erros_p[i,4] <- number[i]
i <- i + 1
}
parametros
erros_p
library(nlme)
library(ggplot2)
setwd("")#Mudar diretório aqui
datawide<-read.table("chumbo.txt",header=T)
datawide
datawide<-read.table("chumbo.txt",header=T)
datawide<-read.table("chumbo.txt",header=T)
datawide<-read.table("chumbo.txt",header=T)
datawide<-read.table("chumbo.txt",header=T)
datawide<-read.table("chumbo.txt",header=T)
cor(datawide[,3:6])
with(datawide, boxplot(Sem0,Sem1,Sem4,Sem6,ylab="pb (mg/dl)",xlab="Semana"))
axis(1, 1:4, c(0,1,4,6))
# Transformando o banco wide para longo
datalong<-reshape(data=datawide,direction="long", idvar="ID", varying = list(names(datawide)[3:6]), v.names="chumbo", time= c(0,1,4,6), timevar="tempo")
# Gráficos de perfis
p1=ggplot(datalong, aes(x=tempo, y=chumbo, color=Grupo)) + geom_point() +	theme_bw() +
geom_line(aes(group=ID),size=0.05) + theme(legend.position="top") +
scale_x_continuous(breaks=unique(datalong$tempo))
# Boxplots
p2=ggplot(datalong, aes(x=factor(tempo), y=chumbo, fill=Grupo)) + geom_boxplot(notch=TRUE) +
theme(legend.position="top")
# Gráfico de Interação
with(datalong, interaction.plot(tempo, Grupo, chumbo))
## MODELO 1
## Modelo linear de efeito fixo (com intercepto)
#Independente
datalong$tempo=as.factor(datalong$tempo)
out1.ind<-lm(chumbo ~  tempo*Grupo,data=datalong)
round(summary(out1.ind)$coef,3)
#Simetria Composta
out1.exch<-gls(chumbo ~  tempo*Grupo, correlation=corCompSymm (form=~1|ID),data=datalong)
round(coef(summary(out1.exch)),3)
#AR1
out1.ar1<-gls(chumbo ~  tempo*Grupo, correlation=corAR1 (form=~1|ID),data=datalong)
round(coef(summary(out1.ar1)),3)
#Não estruturada
out1.unst<-gls(chumbo ~  tempo*Grupo, correlation=corSymm (form=~1|ID),data=datalong)
round(coef(summary(out1.unst)),3)
## MODELO 2
## Modelo linear de efeito fixo (sem intercepto)
#      mais simples de comparar os grupos em cada tempo
#Independente
out2.ind<-lm(chumbo ~ tempo*Grupo -1,data=datalong)
round(summary(out2.ind)$coef,3)
#Simetria Composta
out2.exch<-gls(chumbo ~  tempo*Grupo -1, correlation=corCompSymm (form=~1|ID),data=datalong)
round(coef(summary(out2.exch)),3)
#AR1
out2.ar1<-gls(chumbo ~  tempo*Grupo -1, correlation=corAR1 (form=~1|ID),data=datalong)
round(coef(summary(out2.ar1)),3)
#Não estruturada
out2.unst<-gls(chumbo ~ tempo*Grupo -1, correlation=corSymm (form=~1|ID),data= datalong)
round(coef(summary(out2.unst)),3)
install.packages("jsonlite")
library(jsonlite)
library(ISLR)
install.packages(c("akima", "gam"))
library(ISLR)
load("Wage.Rd")
attach(Wage)
setwd("~/Documentos/Git/disciplinas/08 Semestre/CE092 - Extensões de Modelos de Regressão")
library(ISLR)
load("Wage.Rd")
attach(Wage)
fit=lm(wage~poly(age,4),data=Wage)
rm(list = ls())
library(ISLR)
load("Wage.Rd")
attach(Wage)
fit=lm(wage~poly(age,4),data=Wage)
coef(summary(fit))
fit2=lm(wage~poly(age,4,raw=T),data=Wage)
coef(summary(fit2))
fit2a=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
coef(fit2a)
fit2b=lm(wage~cbind(age,age^2,age^3,age^4),data=Wage)
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial",outer=T)
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
preds2=predict(fit2,newdata=list(age=age.grid),se=TRUE)
max(abs(preds$fit-preds2$fit))
fit.1=lm(wage~age,data=Wage)
fit.2=lm(wage~poly(age,2),data=Wage)
fit.3=lm(wage~poly(age,3),data=Wage)
fit.4=lm(wage~poly(age,4),data=Wage)
fit.5=lm(wage~poly(age,5),data=Wage)
anova(fit.1,fit.2,fit.3,fit.4,fit.5)
coef(summary(fit.5))
(-11.983)^2
fit.1=lm(wage~education+age,data=Wage)
fit.2=lm(wage~education+poly(age,2),data=Wage)
fit.3=lm(wage~education+poly(age,3),data=Wage)
anova(fit.1,fit.2,fit.3)
fit=glm(I(wage>250)~poly(age,4),data=Wage,family=binomial)
preds=predict(fit,newdata=list(age=age.grid),se=T)
pfit=exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit = cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
se.bands = exp(se.bands.logit)/(1+exp(se.bands.logit))
preds=predict(fit,newdata=list(age=age.grid),type="response",se=T)
plot(age,I(wage>250),xlim=agelims,type="n",ylim=c(0,.2))
points(jitter(age), I((wage>250)/5),cex=.5,pch="|",col="darkgrey")
lines(age.grid,pfit,lwd=2, col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
table(cut(age,4))
fit=lm(wage~cut(age,4),data=Wage)
coef(summary(fit))
library(splines)
fit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage)
pred=predict(fit,newdata=list(age=age.grid),se=T)
plot(age,wage,col="gray")
lines(age.grid,pred$fit,lwd=2)
lines(age.grid,pred$fit+2*pred$se,lty="dashed")
lines(age.grid,pred$fit-2*pred$se,lty="dashed")
dim(bs(age,knots=c(25,40,60)))
dim(bs(age,df=6))
attr(bs(age,df=6),"knots")
fit2=lm(wage~ns(age,df=4),data=Wage)
pred2=predict(fit2,newdata=list(age=age.grid),se=T)
lines(age.grid, pred2$fit,col="red",lwd=2)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Smoothing Spline")
fit=smooth.spline(age,wage,df=16)
fit2=smooth.spline(age,wage,cv=TRUE)
fit2$df
lines(fit,col="red",lwd=2)
lines(fit2,col="blue",lwd=2)
legend("topright",legend=c("16 DF","6.8 DF"),col=c("red","blue"),lty=1,lwd=2,cex=.8)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Local Regression")
fit=loess(wage~age,span=.2,data=Wage)
fit2=loess(wage~age,span=.5,data=Wage)
lines(age.grid,predict(fit,data.frame(age=age.grid)),col="red",lwd=2)
lines(age.grid,predict(fit2,data.frame(age=age.grid)),col="blue",lwd=2)
legend("topright",legend=c("Span=0.2","Span=0.5"),col=c("red","blue"),lty=1,lwd=2,cex=.8)
gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage)
library(gam)
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage)
par(mfrow=c(1,3))
plot(gam.m3, se=TRUE,col="blue")
plot.gam(gam1, se=TRUE, col="red")
gam.m1=gam(wage~s(age,5)+education,data=Wage)
gam.m2=gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1,gam.m2,gam.m3,test="F")
summary(gam.m3)
preds=predict(gam.m2,newdata=Wage)
gam.lo=gam(wage~s(year,df=4)+lo(age,span=0.7)+education,data=Wage)
plot.gam(gam.lo, se=TRUE, col="green")
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,data=Wage)
library(akima)
plot(gam.lo.i)
gam.lr=gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage)
par(mfrow=c(1,3))
plot(gam.lr,se=T,col="green")
table(education,I(wage>250))
gam.lr.s=gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage,subset=(education!="1. < HS Grad"))
plot(gam.lr.s,se=T,col="green")
rm(list = ls())
library(ISLR)
load("Wage.Rd")
attach(Wage)
fit=lm(wage~poly(age,4),data=Wage)
coef(summary(fit))
fit2=lm(wage~poly(age,4,raw=T),data=Wage)
coef(summary(fit2))
fit2a=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
coef(fit2a)
fit2b=lm(wage~cbind(age,age^2,age^3,age^4),data=Wage)
agelims=range(age)
fit2a=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
coef(fit2a)
fit2b=lm(wage~cbind(age,age^2,age^3,age^4),data=Wage)
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial",outer=T)
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
install.packages(c("alr3", "car", "numDeriv"))
library(lattice)
library(latticeExtra)
library(car)
library(alr3)
# library(rootSolve)
library(numDeriv)
# Função que converte objeto `nls` para `lm` para ver resíduos.
source("https://raw.githubusercontent.com/walmes/wzRfun/master/R/as.lm.R")
# Para bandas de confiança.
source("https://raw.githubusercontent.com/walmes/wzRfun/master/R/panel.cbH.R")
library(lattice)
library(latticeExtra)
library(car)
library(alr3)
# library(rootSolve)
library(numDeriv)
# Função que converte objeto `nls` para `lm` para ver resíduos.
source("https://raw.githubusercontent.com/walmes/wzRfun/master/R/as.lm.R")
# Para bandas de confiança.
source("https://raw.githubusercontent.com/walmes/wzRfun/master/R/panel.cbH.R")
# turk0
str(turk0)
xtabs(~A, data = turk0)
xyplot(Gain ~ A, data = turk0, type = c("p", "smooth"))
start <- list(th0 = 625, th1 = 800 - 625, th2 = 0.1)
xyplot(Gain ~ A, data = turk0) +
layer(panel.curve(th0 + th1 * x/(th2 + x)),
data = start)
n0 <- nls(Gain ~ th0 + th1 * A/(th2 + A),
data = turk0,
start = start)
summary(n0)
xyplot(Gain ~ A, data = turk0) +
layer(panel.curve(th0 + th1 * x/(th2 + x)),
data = start)
n0 <- nls(Gain ~ th0 + th1 * A/(th2 + A),
data = turk0,
start = start)
summary(n0)
# Curva ajustada sobre os dados.
xyplot(Gain ~ A, data = turk0)+
layer(panel.curve(th0 + th1 * x/(th2 + x), col = 2),
data = as.list(coef(n0)))
# Baseado na log-verossimilhança.
confint(n0)
# Baseado na aproximação quadrática da verossimilhança, conhecido como
# intervalos de Wald ou assintóticos. São simétricos por construção.
confint.default(n0)
# Modelo escrito como função dos parâmetros (theta).
f <- function(theta, xx) {
with(as.list(theta),
th0 + th1 * xx/(th2 + xx))
}
# Matriz de derivadas parciais em theta (n x p).
jacobian(func = f, x = coef(n0), xx = c(0, 0.2, 0.4))
# Valores preditos.
pred <- data.frame(A = seq(0, 0.5, l = 20))
pred$fit <- predict(n0, newdata = pred)
# Matriz de derivadas parciais avaliadas nas estimativas.
X_partial <- jacobian(func = f, x = coef(n0), xx = pred$A)
library(lattice)
library(latticeExtra)
library(car)
library(alr3)
# library(rootSolve)
library(numDeriv)
# Função que converte objeto `nls` para `lm` para ver resíduos.
source("https://raw.githubusercontent.com/walmes/wzRfun/master/R/as.lm.R")
# Para bandas de confiança.
source("https://raw.githubusercontent.com/walmes/wzRfun/master/R/panel.cbH.R")
# turk0
str(turk0)
xtabs(~A, data = turk0)
xyplot(Gain ~ A, data = turk0, type = c("p", "smooth"))
start <- list(th0 = 625, th1 = 800 - 625, th2 = 0.1)
xyplot(Gain ~ A, data = turk0) +
layer(panel.curve(th0 + th1 * x/(th2 + x)),
data = start)
n0 <- nls(Gain ~ th0 + th1 * A/(th2 + A),
data = turk0,
start = start)
summary(n0)
# Curva ajustada sobre os dados.
xyplot(Gain ~ A, data = turk0)+
layer(panel.curve(th0 + th1 * x/(th2 + x), col = 2),
data = as.list(coef(n0)))
# Baseado na log-verossimilhança.
confint(n0)
# Baseado na aproximação quadrática da verossimilhança, conhecido como
# intervalos de Wald ou assintóticos. São simétricos por construção.
confint.default(n0)
# Modelo escrito como função dos parâmetros (theta).
f <- function(theta, xx) {
with(as.list(theta),
th0 + th1 * xx/(th2 + xx))
}
layout(1)
# Modelo escrito como função dos parâmetros (theta).
f <- function(theta, xx) {
with(as.list(theta),
th0 + th1 * xx/(th2 + xx))
}
# Matriz de derivadas parciais em theta (n x p).
jacobian(func = f, x = coef(n0), xx = c(0, 0.2, 0.4))
# Valores preditos.
pred <- data.frame(A = seq(0, 0.5, l = 20))
pred$fit <- predict(n0, newdata = pred)
# Matriz de derivadas parciais avaliadas nas estimativas.
X_partial <- jacobian(func = f, x = coef(n0), xx = pred$A)
X_partial
# Choleski da matriz de covariância das estimativas.
U <- chol(vcov(n0))
# Erro padrão para cada valor predito.
pred$se <- sqrt(apply(X_partial %*% t(U),
MARGIN = 1,
FUN = function(x) sum(x^2)))
pred$se
# Estatística t para obter a margem de erro.
tval <- qt(p = c(lwr = 0.025, upr = 0.975),
df = df.residual(n0))
me <- outer(X = pred$se, Y = tval, FUN = "*")
me
# Obtenão dos limites de confiança.
pred <- cbind(pred,
sweep(x = me,
MARGIN = 1,
STATS = pred$fit,
FUN = "+"))
head(pred)
# Equação do modelo ajustado.
coef(n0)
formula(n0)
# Observados, preditos e a banda de confiança.
xyplot(Gain ~ A, data = turk0) +
as.layer(xyplot(fit ~ A,
data = pred,
type = "l",
prepanel = prepanel.cbH,
cty = "bands",
ly = pred$lwr,
uy = pred$upr,
panel = panel.cbH))
str(segreg)
xyplot(C ~ Temp, data = segreg, type = c("p", "smooth"))
start <- list(th0 = 75, th1 = 0.5, th2 = 50)
xyplot(C ~ Temp, data = segreg) +
layer(panel.curve(th0 + th1 * (x - th2) * (x >= th2) +
0 * (x < th2)), data = start)
xyplot(C ~ Temp, data = segreg) +
layer(panel.curve(th0 + th1 * (x - th2) * (x >= th2) +
0 * (x < th2)), data = start)
xyplot(C ~ Temp, data = segreg, type = c("p", "smooth"))
start <- list(th0 = 75, th1 = 0.5, th2 = 50)
xyplot(C ~ Temp, data = segreg) +
layer(panel.curve(th0 + th1 * (x - th2) * (x >= th2) +
0 * (x < th2)), data = start)
# Ajuste. TIP: o ponto de quebra é desconhecido.
n2 <- nls(C ~ th0 + th1 * (Temp - th2) * (Temp >= th2) +
0 * (Temp < th2),
data = segreg,
start = start)
# Estimativas e medidas de ajuste.
summary(n2)
# Intervalos de confiança.
# confint(n2)
confint.default(n2)
# Observados e preditos.
xyplot(C ~ Temp, data = segreg) +
layer(panel.curve(th0 + th1 * (x - th2) * (x >= th2) +
0 * (x < th2), col = 4),
data = as.list(coef(n2)))
m2 <- as.lm(n2)
par(mfrow = c(2, 2))
plot(m2)
layout(1)
f <- function(theta, xx) {
with(as.list(theta),
th0 + th1 * (xx - th2) * (xx >= th2) +
0 * (xx < th2))
}
pred <- data.frame(Temp = sort(c(seq(10, 80, l = 100),
coef(n2)["th2"] +
c(-0.001, 0, 0.001))))
pred$fit <- predict(n2, newdata = pred)
# Derivadas parciais.
X_partial <- jacobian(func = f, x = coef(n2), xx = pred$Temp)
head(X_partial)
tail(X_partial)
U <- chol(vcov(n2))
pred$se <- sqrt(apply(X_partial %*% t(U),
MARGIN = 1,
FUN = function(x) sum(x^2)))
tval <- qt(p = c(lwr = 0.025, upr = 0.975),
df = df.residual(n2))
me <- outer(X = pred$se, Y = tval, FUN = "*")
pred <- cbind(pred, sweep(x = me,
MARGIN = 1,
STATS = pred$fit,
FUN = "+"))
str(pred)
# Equação do modelo ajustado.
coef(n2)
formula(n2)
# Arredonda as estimativas.
theta <- mapply(round,
x = coef(n2),
digits = c(2, 4, 2),
SIMPLIFY = FALSE)
theta
# Equação para inserir no gráfico.
formula(n2)
eq <- substitute(
expr = c(
expression(C==th0~", se"~Temp < th2),
expression(C==th0 + th1 * (Temp - th2)~", se"~Temp >= th2)),
env = theta)
eval(eq)
# Observados, preditos e a banda de confiança.
xyplot(C ~ Temp, data = segreg) +
as.layer(xyplot(fit ~ Temp,
data = pred,
type = "l",
prepanel = prepanel.cbH,
cty = "bands",
ly = pred$lwr,
uy = pred$upr,
panel = panel.cbH)) +
layer(panel.key(points = FALSE,
text = eval(eq),
corner = c(0.05, 0.95)))
sec <- read.table("http://www.leg.ufpr.br/~walmes/data/emr11.txt",
header = TRUE,
sep = "\t",
encoding = "latin1")
str(sec)
xyplot(umrel ~ tempo | nome, data = sec)
cap <- read.table("http://www.leg.ufpr.br/~walmes/data/algodão.txt",
header = TRUE,
sep = "\t",
encoding = "latin1")
cap$desf <- cap$desf/100
cap <- subset(cap, select = c(estag, desf, pcapu))
cap$estag <- factor(cap$estag, labels = c("vegetativo",
"botão floral",
"florescimento",
"maçã",
"capulho"))
str(cap)
xyplot(pcapu ~ desf | estag,
data = cap,
layout = c(5, 1),
xlab = "Nível de desfolha artificial",
ylab = "Peso de capulhos")
soja <- read.table("http://www.leg.ufpr.br/~walmes/data/soja.txt",
header = TRUE,
sep = "\t",
encoding = "latin1",
dec = ",")
soja$agua <- factor(soja$agua)
str(soja)
xyplot(rengrao ~ potassio|agua, data=soja)
# Modelo: linear-plato.
# Modelo: linear-plato.
#
# Modelo: linear-plato.
#
#   model <- rengrao ~ f0 + tx * potassio * (potassio < brk) +
# Modelo: linear-plato.
#
#   model <- rengrao ~ f0 + tx * potassio * (potassio < brk) +
#       tx * brk * (potassio >= brk)
soja <- read.table("http://www.leg.ufpr.br/~walmes/data/soja.txt",
header = TRUE,
sep = "\t",
encoding = "latin1",
dec = ",")
soja$agua <- factor(soja$agua)
str(soja)
xyplot(rengrao ~ potassio|agua, data=soja)
