getwd()
df <- read.table("df02.txt", head=TRUE)
df
par(mfrow=c(1,2))
with(df,plot(x,Y1))
with(df,plot(x,Y2))
df <- list()
df
(df$x <- sort(round(runif(25, 0, 20), dig=1)))
seq(0, 20, l=2001)
ndf <- data.frame(x = seq(0, 20, l=2001))
ndf$x[ndf$x == 10] <- NA
err <- round(rnorm(25, m=0, sd=3), dig=1)
err
df$y1 <- 50 + err
plot(y1 ~  x, data=df)
(fit1 <- lm(y1 ~ 1, data=df))
mean(df$y1)
abline(fit1)
with(df,plot(x,Y2))
with(df,plot(x,Y2))
df <- read.table("df02.txt", head=TRUE)
par(mfrow=c(1,2))
with(df,plot(x,Y1))
with(df,plot(x,Y2))
fit1 <- lm(Y1~x+1)
fit1 <- lm(Y1~x+1,data = df)
fit2 <- lm(Y2~x+1,data = df)
with(df,plot(x,Y1))
abline(fit1)
with(df,plot(x,Y1))
with(df,plot(x,Y1))
abline(fit1,cool = 'red')
abline(fit1,col = 'red')
fit1 <- lm(Y1~1,data = df)
fit1 <- lm(Y1~1,data = df)
with(df,plot(x,Y1))
abline(fit1,col = 'red')
with(df,plot(x,Y1))
abline(fit1,col = 'red')
fit2 <- lm(Y2~1,data = df)
fit2 <- lm(Y2~1,data = df)
with(df,plot(x,Y2))
fit2 <- lm(Y2~1,data = df)
abline(fit2,col = 'red')
fit1 <- lm(Y1~x,data = df)
abline(fit1,col = 'red')
with(df,plot(x,Y1))
fit1 <- lm(Y1~x,data = df)
abline(fit1,col = 'red')
with(df,plot(x,Y2))
fit2 <- lm(Y2~x,data = df)
abline(fit2,col = 'red')
plot(Y2~x,data = df)
with(df,plot(x,Y2))
df <- list()
(df$x <- sort(round(runif(25, 0, 20), dig=1)))
ndf <- data.frame(x = seq(0, 20, l=2001))
ndf$x[ndf$x == 10] <- NA
err <- round(rnorm(25, m=0, sd=3), dig=1)
df$y1 <- 50 + err
plot(y1 ~  x, data=df)
(fit1 <- lm(y1 ~ 1, data=df))
mean(df$y1)
abline(fit1)
ndf$y1 <- predict(fit1, newdata=ndf)
lines(y1 ~  x, data=ndf, type="l", col=2)
df$x10 <- ifelse(df$x >= 10, 1, 0)
df
df$x10
ndf$x10 <- ifelse(ndf$x >= 10, 1, 0)
ndf
df <- transform(df, y2 = 50 - 5 * x10 + err)
df
err
help("transform")
(fit2 <- lm(y2 ~ x10, data=df))
aggregate(y2 ~ x10, data=df, mean)
sum(coef(fit2))
ndf$y2 <- predict(fit2, newdata=ndf)
ndf
lines(y2 ~ x, data=ndf, type="l", col=2)
5 + 2 * df$x + err
df$x
err
0.8+3.7+5
df <- transform(df, y3 = 5 + 2 * df$x + err)
plot(y3 ~  x, data=df)
(fit3 <- lm(y3 ~ x, data=df))
abline(fit3)
ndf$y3 <- predict(fit3, newdata=ndf)
lines(y3 ~  x, data=ndf, type="l", col=2)
df <- transform(df, y4 =  5 + 2 * x - 5*x10 + err)
plot(y4 ~  x, data=df)
(fit4 <- lm(y4 ~ x + x10, data=df))
ndf$y4 <- predict(fit4, newdata=ndf)
lines(y4 ~  x, data=ndf, type="l", col=2)
(fit4 <- lm(y4 ~ x, data=df))
ndf$y4 <- predict(fit4, newdata=ndf)
lines(y4 ~  x, data=ndf, type="l", col=2)
plot(y4 ~  x, data=df)
plot(y4 ~  x, data=df)
(fit4 <- lm(y4 ~ x, data=df))
ndf$y4 <- predict(fit4, newdata=ndf)
lines(y4 ~  x, data=ndf, type="l", col=2)
plot(y4 ~  x, data=df)
(fit4 <- lm(y4 ~ x+x10, data=df))
ndf$y4 <- predict(fit4, newdata=ndf)
lines(y4 ~  x, data=ndf, type="l", col=2)
df <- transform(df, y5 =  5 + 2 * x - 2.5*x*x10 + err)
plot(y5 ~  x, data=df, xlim=c(0, 20))
(fit5 <- lm(y5 ~ x + I(x*x10), data=df))
ndf$y5 <- predict(fit5, newdata=ndf)
lines(y5 ~  x, data=ndf, type="l", col=2)
abline(c(coef(fit5)[1],sum(coef(fit5)[2:3])), lty=3, col=2)
I(x*x10)
x*x10
I(df$y3)
df$y3
I(df$y3*df$y4)
df$y3*df$y4
df <- transform(df, y6 = 5 + 2 * x - I(10 * x10) + (2.5 * x * x10) + err)
plot(y6 ~  x, data=df)
(fit6 <- lm(y6 ~ x + x10 + I(x*x10), data=df))
ndf$y6 <- predict(fit6, newdata=ndf)
lines(y6 ~  x, data=ndf, type="l", col=2)
df <- transform(df, y7 = 5 + 1 * x + 2.5 * (x-10) * x10 + err)
plot(y7 ~  x, data=df)
(fit7 <- lm(y7 ~ x + I((x-10)*x10), data=df))
ndf$y7 <- predict(fit7, newdata=ndf)
lines(y7 ~  x, data=ndf, type="l", col=2)
df <- transform(df, xK = ifelse(x < 10, 0, x-10))
ndf <- transform(ndf, xK = ifelse(x < 10, 0, x-10))
(fit7 <- lm(y7 ~ x + xK, data=df))
ndf$y7 <- predict(fit7, newdata=ndf)
lines(y7 ~  x, data=ndf, type="l", col=4)
Ks <- c(5, 7.5, 10, 12.5)
regseg.f <- function(k, lines=FALSE, fit=TRUE){
df <- transform(df, xK = ifelse(x < k, 0, x-k))
ndf <- transform(ndf, xK = ifelse(x < k, 0, x-k))
reg <- lm(y7 ~ x + xK, data=df)
if(lines){
ndf$yK <- predict(reg, newdata=ndf)
lines(yK ~ x, data=ndf, type="l", lty=2)
}
if(fit) return(reg)
else return(invisible())
}
fitK <- lapply(Ks, regseg.f)
fitK
names(fitK) <- paste("K",Ks, sep="-")
fitK
plot(y7 ~  x, data=df)
lapply(Ks, regseg.f, lines=TRUE, fit=FALSE)
(lLs <- sapply(fitK, logLik))
lLs[which.max(lLs)]
Ks <- seq(2, 18, by=0.1)
fitK <- lapply(Ks, regseg.f)
names(fitK) <- paste("K",Ks, sep="-")
lLs <- sapply(fitK, logLik)
lLs[which.max(lLs)]
plot(Ks, lLs, ty="l")
abline(v=9.2, lty=2)
df <- transform(df, y6 = 5 + 2 * x - I(10 * x10) + (2.5 * x * x10) + err)
plot(y6 ~  x, data=df)
(fit6 <- lm(y6 ~ x + x10 + I(x*x10), data=df))
ndf$y6 <- predict(fit6, newdata=ndf)
lines(y6 ~  x, data=ndf, type="l", col=2)
df <- transform(df, y5 =  5 + 2 * x - 2.5*x*x10 + err)
plot(y5 ~  x, data=df, xlim=c(0, 20))
(fit5 <- lm(y5 ~ x + I(x*x10), data=df))
ndf$y5 <- predict(fit5, newdata=ndf)
lines(y5 ~  x, data=ndf, type="l", col=2)
abline(c(coef(fit5)[1],sum(coef(fit5)[2:3])), lty=3, col=2)
df$y1 <- 50 + err
plot(y1 ~  x, data=df)
(fit1 <- lm(y1 ~ 1, data=df))
mean(df$y1)
abline(fit1)
ndf$y1 <- predict(fit1, newdata=ndf)
lines(y1 ~  x, data=ndf, type="l", col=2)
df$x10 <- ifelse(df$x >= 10, 1, 0)
ndf$x10 <- ifelse(ndf$x >= 10, 1, 0)
df <- transform(df, y2 = 50 - 5 * x10 + err)
plot(y2 ~  x, data=df)
(fit2 <- lm(y2 ~ x10, data=df))
aggregate(y2 ~ x10, data=df, mean)
sum(coef(fit2))
ndf$y2 <- predict(fit2, newdata=ndf)
lines(y2 ~ x, data=ndf, type="l", col=2)
install.packages("lme4")
mgo1 <- subset(mgo, !(Lab == "E" & MgO > 0.6))
Lab <- c("A","A","A","B","B","B","B","B","C","C","C","D","D","D","E","E","E","F","F","F","G","G","G","H","H","H")
Mgo <- c(1.86,1.88,1.86,2.00,2.00,1.99,2.02,2.01,1.84,1.83,1.83,1.64,1.73,1.68,0.28,0.31,0.68,
1.88,1.87,1.86,1.87,1.87,1.86,1.85,1.86,1.85)
mgo <- data.frame(Lab,Mgo)
summary(mgo)
mgo1 <- subset(mgo, !(Lab == "E" & MgO > 0.6))
MgO <- c(1.86,1.88,1.86,2.00,2.00,1.99,2.02,2.01,1.84,1.83,1.83,1.64,1.73,1.68,0.28,0.31,0.68,
1.88,1.87,1.86,1.87,1.87,1.86,1.85,1.86,1.85)
mgo <- data.frame(Lab,MgO)
mgo1 <- subset(mgo, !(Lab == "E" & MgO > 0.6))
require(lme4)
mgo1.lmer <- lmer(MgO ~ 1 + (1 | Lab), mgo1)
mgo2.lmer <- lmer(MgO ~ 1, mgo1)
mgo1.lmer <- lmer(MgO ~ (1 | Lab), mgo1)
mgo3.lmer <- lmer(MgO ~  + (1 | Lab), mgo1)
mgo4.lmer <- lmer(MgO ~ 1 + Lab, mgo1)
mgo4.lmer <- lmer(MgO ~  + Lab, mgo1)
mgo4.lmer <- lmer(MgO ~  + ( | Lab), mgo1)
mgo4.lmer <- lmer(MgO ~  + (2 | Lab), mgo1)
mgo4.lmer <- lmer(MgO ~  + (MgO | Lab), mgo1)
summary(mgo1.lmer)
summary(mgo2.lmer)
mgo2.lmer <- lmer(MgO ~ (1 | Lab), mgo1)
summary(mgo2.lmer)
summary(mgo3.lmer)
mgo1.lmer
mgo1.lmer
mgo2.lmer
teste <- rnorm((26))
mgo <- data.frame(Lab,MgO,teste)
summary(mgo)
mgo1 <- subset(mgo, !(Lab == "E" & MgO > 0.6))
mgo1
mgo3.lmer <- lmer(MgO ~ teste+(1 | Lab), mgo1)
mgo3.lmer
mgo3.lmer <- lmer(MgO ~ 1+teste+(1 | Lab), mgo1)
mgo3.lmer
rhom <- Vectorize(function(rho, m) exp(log(m) + log(rho) - log(1+(m-1)*rho)))
m <- Vectorize(function(rho, rhom) exp(log(rhom) + log(1-rho) - log(rho) - log(1-rhom)))
reduAmp <- function(rho, m) 1 - sqrt(rho + ((1-rho)/m))
grauConf <- function(rho, m) exp(log(m) - log(1+(m-1)*rho))
round(100*reduAmp(rho=c(0.05, 0.10, 0.25, 0.50, 0.90), m=3))
round(100*(grauConf(rho=c(0.05, 0.10, 0.25, 0.50, 0.90), m=3) - 1))
round(100*reduAmp(rho=0.50, m=c(2,3,4,5)))
round(100*(grauConf(rho=0.50, m=c(2,3,4,5)) - 1))
Var.rho <- function(rho, N, n) (2*((1-rho)^2)*(n+(N-n)*rho)^2)/(N*(N-n)*(n-1))
n0 <- function(rho, N) (N*((N-1)*rho + 2))/((N+1)+(N-1)*rho)
Var.rho.n0 <- function(rho, N) (8*((1-rho)^2)*((N-1)*rho+1))/((N-1)^2)
rho.seq <- seq(0, 1, length=101)
Nvals <- c(30, 60, 100)
V1 <- sapply(Nvals, function(x) Var.rho.n0(rho=rho.seq, N=x))
par(mgp=c(2.5, 1.2, 0))
matplot(x=rho.seq, y=V1, type="l", col=1, lty=1:3,
xlab=expression(rho), ylab=expression(plain(Var)(hat(rho))))
legend("topright", paste("N = ", N.vals, sep=""), lty=1:3)
rho.maxVar <- function(N) (N-3)/(3*(N-1))
Var.rho.m4 <- function(rho, N) (2*((1-rho)^2)*(1+3*rho)^2)/(3*(N-4))
rho.seq <- seq(0, 1, length=101)
Var60 <- cbind(Vn0 =  Var.rho.n0(rho=rho.seq, N=60), Vm4 = Var.rho.m4(rho=rho.seq, N=60))
Var100 <- cbind(Vn0 = Var.rho.n0(rho=rho.seq, N=100), Vm4 = Var.rho.m4(rho=rho.seq, N=100))
n0.60 <- n0(rho=rho.seq, N=60)
n0.100 <- n0(rho=rho.seq, N=100)
Var60e100 <- merge(data.frame(N=60, rho=rho.seq, Var60, n0=n0.60),
data.frame(N=100, rho=rho.seq, Var100, n0=n0.60), all=T)
require(lattice)
xyplot(Vm4 + Vn0 ~ rho|as.factor(N), data=Var60e100, lty=1:2, col=1, type="l",
xlab=expression(rho), ylab=expression(plain(Var)(hat(rho))),
key=list(text=list(c("Planejamento Ã“timo", "n=N/4")),
lines=list(type=c("l", "l"), lty=1:2),
columns = 2
)
)
rho.seq <- seq(0.05, 1, length=101)
VarRel <- cbind(
VarRel20 = Var.rho.m4(rho=rho.seq, N=20)/Var.rho.n0(rho=rho.seq, N=20),
VarRel40 = Var.rho.m4(rho=rho.seq, N=40)/Var.rho.n0(rho=rho.seq, N=40),
VarRel60 = Var.rho.m4(rho=rho.seq, N=60)/Var.rho.n0(rho=rho.seq, N=60),
VarRel100 = Var.rho.m4(rho=rho.seq, N=100)/Var.rho.n0(rho=rho.seq, N=100)
)
matplot(x=rho.seq, y=VarRel, type="l", col=gray((0:3)*2/10), lty=1:4,
xlab=expression(rho), ylab=expression(Rel(rho)))
legend("topright", paste("N = ", c(20, 40, 60, 100), sep=""), col=gray((0:3)*2/10), lty=1:4)
iri <- data("iris")
str(iri)
iri
str(iris)
table(Species,data=iris)
table(iris$Species)
