col.smooth = 2, # Cor da m?dia do smooth
col.spread = 2, # Cor do ic do smooth
lty.smooth=1, lwd.smooth=1.5,
lty.spread=3, lwd.spread=1),
regLine = list(method=lm, col = 1), # Cor da regress?o
col = 3) # Cor dos pontos
###################
# Ajuste dos Modelos de Regress?o
###################
library(gamlss)
m1.1<-glm(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh, family=poisson(link='log'),data=dados)
summary(m1.1)
par(mfrow = c(2,2))
plot(m1.1)
# Modelo Gamlss Poisson
m1.2<-gamlss(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh, family=PO, data=dados)
par(mfrow = c(2,2))
plot(m1.2)
# Modelo Poisson com infla??o de zeros (mas sem covari?veis para o componente do excesso de zeros)
m1.3 <- gamlss(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh,family = ZIP, data = dados)
summary(m1.3)
x11()
par(mfrow = c(2,2))
plot(m1.3)
m1.4<-gamlss(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh,
sigma.formula = ~ vphab+log(dens)+purb+palf+pdes+rmed+idh,
family = ZIP, data = dados)
summary(m1.4)
x11()
par(mfrow = c(2,2))
plot(m1.4)
m2.1<-glm.nb(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh, data=dados) ## n?o utilizar
summary(m2.1)
x11()
par(mfrow = c(2,2))
plot(m2.1)
m2.2<-gamlss(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh, family=NBI, data=dados)
summary(m2.2)
x11()
par(mfrow = c(2,2))
plot(m2.2)
coef(m2.1)
coef(m2.2)
m2.3<-gamlss(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh, family=NBII, data=dados)
summary(m2.3)
x11()
par(mfrow = c(2,2))
plot(m2.3)
m2.4<-gamlss(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh, family=NBF, data=dados)
summary(m2.4)
x11()
par(mfrow = c(2,2))
plot(m2.4)
m2.5<-gamlss(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh,family = ZINBI, data = dados)
summary(m2.5)
x11()
par(mfrow = c(2,2))
plot(m2.5) #ajuste interessante
Dev    = c(deviance(m1.1),deviance(m1.2),deviance(m1.3),deviance(m1.4),
deviance(m2.1),deviance(m2.2),deviance(m2.3),
deviance(m2.4),deviance(m2.5),deviance(m2.6))
Ajuste = c('Po_Glm-1.1','Po_Gaml-1.2','Po_Zip-1.3','Po_ZipIPCov-1.4',
'Bn_Glm-2.1','Bn_TpI-2.2','Bn_TpII-2.3','Bn_Fam-2.4','Bn_Zinbi-2.5','Bn_ZinbiCOv-2.6')
Dev    = c(deviance(m1.1),deviance(m1.2),deviance(m1.3),deviance(m1.4),
deviance(m2.1),deviance(m2.2),deviance(m2.3),
deviance(m2.4),deviance(m2.5),deviance(m2.6))
AIC    = c(AIC(m1.1),AIC(m1.2),AIC(m1.3),AIC(m1.4),
AIC(m2.1),AIC(m2.2),AIC(m2.3),
AIC(m2.4),AIC(m2.5),AIC(m2.6))
LVeros = c(logLik(m1.1),logLik(m1.2),logLik(m1.3),logLik(m1.4),
logLik(m2.1),logLik(m2.2),logLik(m2.3),
logLik(m2.4),logLik(m2.5),logLik(m2.6))
m2.6<-gamlss(obit~vphab+log(dens)+purb+palf+pdes+rmed+idh,
nu.formula = ~ vphab+log(dens)+purb+palf+pdes+rmed+idh,
family = ZINBI, data = dados)
summary(m2.6)
x11()
par(mfrow = c(2,2))
plot(m2.6)
require(gamlss) ### Carregando o pacote gamlss.
require(gamlss.demo)
setwd("~/Git/disciplinas/Optativas/CE043 - GAMLSS/Trabalho 01")
dados <- read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
dados
str(dados)
summary(dados)
head(dados)
setwd("~/Git/disciplinas/Optativas/CE043 - GAMLSS/Trabalho 01")
dados = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
mydata$Data = as.character(mydata$Data)
dados = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(corrplot)
library(gamlss)
library(gamlss.data)
library(gamlss.dist)
dados = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
dados$Data = as.character(mydata$Data)
DataAux = dados$Data %>% str_split(" ", n=2, simplify =TRUE)
dados = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
dados$Data = as.character(dados$Data)
DataAux = dados$Data %>% str_split(" ", n=2, simplify =TRUE)
date= DataAux[,1]
DataAux
date
DataAux
dados$Data = as.character(dados$Data)
DataAux = dados$Data %>% str_split(" ", n=2, simplify =TRUE)
DataAjust= DataAux[,1]
month_day = DataAjust %>% str_split("/", n=3, simplify =TRUE)
month_day = month_day[,c(1,2)]
str(month_day)
month_day = data.frame(month_day)
month_day$X1 = as.numeric(month_day$X1) +8
month_day$X2 = as.numeric(month_day$X2)
mydata = mydata[,-c(1,2,3)]
dados = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
dados$Data = as.character(dados$Data)
DataAux = dados$Data %>% str_split(" ", n=2, simplify =TRUE)
DataAjust= DataAux[,1]
month_day = DataAjust %>% str_split("/", n=3, simplify =TRUE)
month_day = month_day[,c(1,2)]
str(month_day)
month_day = data.frame(month_day)
month_day$X1 = as.numeric(month_day$X1) +8
month_day$X2 = as.numeric(month_day$X2)
mydata = dados[,-c(1,2,3)]
str(dados)
#Making arrangements on TimeSunRise column
timesunrise = dados[,7]
timesunrise = as.character(timesunrise)
str(timesunrise)
splitted_timesunrise = timesunrise %>% str_split(":", n = 3, simplify = TRUE)
str(splitted_timesunrise)
splitted_timesunrise = data.frame(splitted_timesunrise,stringsAsFactors = FALSE)
colnames(splitted_timesunrise)
splitted_timesunrise$X1 = as.numeric(splitted_timesunrise$X1)
splitted_timesunrise$X2 = as.numeric(splitted_timesunrise$X2)
splitted_timesunrise$X3 = as.numeric(splitted_timesunrise$X3)
beginningtime = rep(NA,32686)
for(i in 1:32686){
beginningtime[i] = splitted_timesunrise$X1[i]*60 +splitted_timesunrise$X2[i]
}
#Making arrangements on TimeSunSet column
timesunset = mydata[,8]
timesunset = as.character(timesunset)
str(timesunset)
splitted_timesunset = timesunset %>% str_split(":", n = 3, simplify = TRUE)
str(splitted_timesunset)
splitted_timesunset = data.frame(splitted_timesunset,stringsAsFactors = FALSE)
colnames(splitted_timesunset)
splitted_timesunset$X1 = as.numeric(splitted_timesunset$X1)
splitted_timesunset$X2 = as.numeric(splitted_timesunset$X2)
splitted_timesunset$X3 = as.numeric(splitted_timesunset$X3)
str(splitted_timesunset)
endingtime = rep(NA,32686)
for(i in 1:32686){
endingtime[i] = splitted_timesunset$X1[i]*60 +splitted_timesunset$X2[i]
}
mydata$TimeSunRise = beginningtime
mydata$TimeSunSet = endingtime
mydata = data.frame(mydata,month = month_day$X1 , day = month_day$X2)
dim(mydata)
ggplot(mydata, aes(day, Radiation)) +
geom_boxplot() +
facet_grid(.~month) +
geom_jitter(aes(color = factor(month)),alpha = 0.3) +
ggtitle("Boxplot of Radiation values for each month") +
theme_light()
september = mydata %>% filter( month == 9 )
october = mydata %>% filter( month == 10 )
november = mydata %>% filter( month == 11 )
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(tidyr)
library(stringr)
library(ggplot2)
library(corrplot)
library(gamlss)
library(gamlss.data)
library(gamlss.dist)
dados = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
dados
dados
head(dados)
str(dados)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(corrplot)
library(gamlss)
library(gamlss.data)
library(gamlss.dist)
mydata = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
mydata$Data = as.character(mydata$Data)
Data_splitted = mydata$Data %>% str_split(" ", n=2, simplify =TRUE)
date= Data_splitted[,1]
month_day = date %>% str_split("/", n=3, simplify =TRUE)
month_day = month_day[,c(1,2)]
str(month_day)
month_day = data.frame(month_day)
month_day$X1 = as.numeric(month_day$X1) +8
month_day$X2 = as.numeric(month_day$X2)
mydata = mydata[,-c(1,2,3)]
str(mydata)
#Making arrangements on TimeSunRise column
timesunrise = mydata[,7]
timesunrise = as.character(timesunrise)
str(timesunrise)
splitted_timesunrise = timesunrise %>% str_split(":", n = 3, simplify = TRUE)
str(splitted_timesunrise)
splitted_timesunrise = data.frame(splitted_timesunrise,stringsAsFactors = FALSE)
colnames(splitted_timesunrise)
splitted_timesunrise$X1 = as.numeric(splitted_timesunrise$X1)
splitted_timesunrise$X2 = as.numeric(splitted_timesunrise$X2)
splitted_timesunrise$X3 = as.numeric(splitted_timesunrise$X3)
beginningtime = rep(NA,32686)
for(i in 1:32686){
beginningtime[i] = splitted_timesunrise$X1[i]*60 +splitted_timesunrise$X2[i]
}
#Making arrangements on TimeSunSet column
timesunset = mydata[,8]
timesunset = as.character(timesunset)
str(timesunset)
splitted_timesunset = timesunset %>% str_split(":", n = 3, simplify = TRUE)
str(splitted_timesunset)
splitted_timesunset = data.frame(splitted_timesunset,stringsAsFactors = FALSE)
colnames(splitted_timesunset)
splitted_timesunset$X1 = as.numeric(splitted_timesunset$X1)
splitted_timesunset$X2 = as.numeric(splitted_timesunset$X2)
splitted_timesunset$X3 = as.numeric(splitted_timesunset$X3)
str(splitted_timesunset)
endingtime = rep(NA,32686)
for(i in 1:32686){
endingtime[i] = splitted_timesunset$X1[i]*60 +splitted_timesunset$X2[i]
}
mydata$TimeSunRise = beginningtime
mydata$TimeSunSet = endingtime
mydata = data.frame(mydata,month = month_day$X1 , day = month_day$X2)
dim(mydata)
ggplot(mydata, aes(day, Radiation)) +
geom_boxplot() +
facet_grid(.~month) +
geom_jitter(aes(color = factor(month)),alpha = 0.3) +
ggtitle("Boxplot of Radiation values for each month") +
theme_light()
september = mydata %>% filter( month == 9 )
october = mydata %>% filter( month == 10 )
november = mydata %>% filter( month == 11 )
december = mydata %>% filter( month == 12 )
mean(september$Radiation)
mean(october$Radiation)
mean(november$Radiation)
mean(december$Radiation)
K <- cor(mydata[,1:10])
K
corrplot(K, method="circle")
ggplot(mydata, aes(day, Radiation)) +
geom_boxplot() +
facet_grid(.~month) +
geom_jitter(aes(color = factor(month)),alpha = 0.3) +
ggtitle("Boxplot of Radiation values for each month") +
theme_light()
september = mydata %>% filter( month == 9 )
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(corrplot)
library(gamlss)
library(gamlss.data)
library(gamlss.dist)
mydata = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
mydata$Data = as.character(mydata$Data)
Data_splitted = mydata$Data %>% str_split(" ", n=2, simplify =TRUE)
date= Data_splitted[,1]
month_day = date %>% str_split("/", n=3, simplify =TRUE)
month_day = month_day[,c(1,2)]
str(month_day)
month_day = data.frame(month_day)
month_day$X1 = as.numeric(month_day$X1) +8
month_day$X2 = as.numeric(month_day$X2)
mydata = mydata[,-c(1,2,3)]
str(mydata)
#Making arrangements on TimeSunRise column
timesunrise = mydata[,7]
timesunrise = as.character(timesunrise)
str(timesunrise)
splitted_timesunrise = timesunrise %>% str_split(":", n = 3, simplify = TRUE)
str(splitted_timesunrise)
splitted_timesunrise = data.frame(splitted_timesunrise,stringsAsFactors = FALSE)
colnames(splitted_timesunrise)
splitted_timesunrise$X1 = as.numeric(splitted_timesunrise$X1)
splitted_timesunrise$X2 = as.numeric(splitted_timesunrise$X2)
splitted_timesunrise$X3 = as.numeric(splitted_timesunrise$X3)
beginningtime = rep(NA,32686)
for(i in 1:32686){
beginningtime[i] = splitted_timesunrise$X1[i]*60 +splitted_timesunrise$X2[i]
}
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(corrplot)
library(gamlss)
library(gamlss.data)
library(gamlss.dist)
mydata = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
mydata$Data = as.character(mydata$Data)
Data_splitted = mydata$Data %>% str_split(" ", n=2, simplify =TRUE)
date= Data_splitted[,1]
month_day = date %>% str_split("/", n=3, simplify =TRUE)
month_day = month_day[,c(1,2)]
str(month_day)
month_day = data.frame(month_day)
month_day$X1 = as.numeric(month_day$X1) +8
month_day$X2 = as.numeric(month_day$X2)
mydata = mydata[,-c(1,2,3)]
str(mydata)
#Making arrangements on TimeSunRise column
timesunrise = mydata[,7]
timesunrise = as.character(timesunrise)
str(timesunrise)
str(timesunrise)
splitted_timesunrise = timesunrise %>% str_split(":", n = 3, simplify = TRUE)
str(splitted_timesunrise)
splitted_timesunrise = data.frame(splitted_timesunrise,stringsAsFactors = FALSE)
colnames(splitted_timesunrise)
splitted_timesunrise$X1 = as.numeric(splitted_timesunrise$X1)
splitted_timesunrise$X2 = as.numeric(splitted_timesunrise$X2)
splitted_timesunrise$X3 = as.numeric(splitted_timesunrise$X3)
beginningtime = rep(NA,32686)
for(i in 1:32686){
beginningtime[i] = splitted_timesunrise$X1[i]*60 +splitted_timesunrise$X2[i]
}
#Making arrangements on TimeSunSet column
timesunset = mydata[,8]
timesunset = as.character(timesunset)
str(timesunset)
splitted_timesunset = timesunset %>% str_split(":", n = 3, simplify = TRUE)
str(splitted_timesunset)
splitted_timesunset = data.frame(splitted_timesunset,stringsAsFactors = FALSE)
colnames(splitted_timesunset)
splitted_timesunset$X1 = as.numeric(splitted_timesunset$X1)
splitted_timesunset$X2 = as.numeric(splitted_timesunset$X2)
splitted_timesunset$X3 = as.numeric(splitted_timesunset$X3)
str(splitted_timesunset)
endingtime = rep(NA,32686)
for(i in 1:32686){
endingtime[i] = splitted_timesunset$X1[i]*60 +splitted_timesunset$X2[i]
}
mydata$TimeSunRise = beginningtime
mydata$TimeSunSet = endingtime
mydata = data.frame(mydata,month = month_day$X1 , day = month_day$X2)
dim(mydata)
ggplot(mydata, aes(day, Radiation)) +
geom_boxplot() +
facet_grid(.~month) +
geom_jitter(aes(color = factor(month)),alpha = 0.3) +
ggtitle("Boxplot of Radiation values for each month") +
theme_light()
september = mydata %>% filter( month == 9 )
october = mydata %>% filter( month == 10 )
november = mydata %>% filter( month == 11 )
december = mydata %>% filter( month == 12 )
mean(september$Radiation)
mean(october$Radiation)
mean(november$Radiation)
mean(december$Radiation)
K <- cor(mydata[,1:10])
K
# september, october, december are close to each other. November is the coolest month.
head(mydata)
splitted_timesunrise
splitted_timesunrise$X1
splitted_timesunrise$X3
beginningtime
beginningtime
timesunset
mydata$TimeSunRise
mydata
summary(mydata)
month_day
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(corrplot)
library(gamlss)
library(gamlss.data)
library(gamlss.dist)
mydata = read.csv("SolarPrediction.csv",sep = ",", dec = ".", header = TRUE)
mydata$Data = as.character(mydata$Data)
Data_splitted = mydata$Data %>% str_split(" ", n=2, simplify =TRUE)
date= Data_splitted[,1]
month_day = date %>% str_split("/", n=3, simplify =TRUE)
month_day
month_day = date %>% str_split("/", n=3, simplify =TRUE)
month_day = month_day[,c(1,2)]
month_day
month_day = month_day[,c(1,2)]
str(month_day)
month_day
dim(month_day)
str(month_day)
month_day = data.frame(month_day)
month_day$X1 = as.numeric(month_day$X1) +8
month_day$X2 = as.numeric(month_day$X2)
mydata
month_day$X1
month_day$X2
4
str(month_day)
month_day = data.frame(month_day)
month_day$X1 = as.numeric(month_day$X1) +8
month_day$X2 = as.numeric(month_day$X2)
mydata = mydata[,-c(1,2,3)]
str(mydata)
#Making arrangements on TimeSunRise column
timesunrise = mydata[,7]
timesunrise = as.character(timesunrise)
str(timesunrise)
splitted_timesunrise = timesunrise %>% str_split(":", n = 3, simplify = TRUE)
str(splitted_timesunrise)
splitted_timesunrise = data.frame(splitted_timesunrise,stringsAsFactors = FALSE)
colnames(splitted_timesunrise)
splitted_timesunrise$X1 = as.numeric(splitted_timesunrise$X1)
splitted_timesunrise$X2 = as.numeric(splitted_timesunrise$X2)
splitted_timesunrise$X3 = as.numeric(splitted_timesunrise$X3)
beginningtime = rep(NA,32686)
for(i in 1:32686){
beginningtime[i] = splitted_timesunrise$X1[i]*60 +splitted_timesunrise$X2[i]
}
splitted_timesunrise
beginningtime = rep(NA,32686)
for(i in 1:32686){
beginningtime[i] = splitted_timesunrise$X1[i]*60 +splitted_timesunrise$X2[i]
}
#Making arrangements on TimeSunSet column
timesunset = mydata[,8]
timesunset = as.character(timesunset)
str(timesunset)
splitted_timesunset = timesunset %>% str_split(":", n = 3, simplify = TRUE)
str(splitted_timesunset)
splitted_timesunset = data.frame(splitted_timesunset,stringsAsFactors = FALSE)
colnames(splitted_timesunset)
splitted_timesunset$X1 = as.numeric(splitted_timesunset$X1)
splitted_timesunset$X2 = as.numeric(splitted_timesunset$X2)
splitted_timesunset$X3 = as.numeric(splitted_timesunset$X3)
str(splitted_timesunset)
endingtime = rep(NA,32686)
for(i in 1:32686){
endingtime[i] = splitted_timesunset$X1[i]*60 +splitted_timesunset$X2[i]
}
mydata$TimeSunRise = beginningtime
beginningtime
mydata$TimeSunRise = beginningtime
mydata$TimeSunSet = endingtime
mydata = data.frame(mydata,month = month_day$X1 , day = month_day$X2)
dim(mydata)
summary(mydata)
ggplot(mydata, aes(day, Radiation)) +
geom_boxplot() +
facet_grid(.~month) +
geom_jitter(aes(color = factor(month)),alpha = 0.3) +
ggtitle("Boxplot of Radiation values for each month") +
theme_light()
september = mydata %>% filter( month == 9 )
october = mydata %>% filter( month == 10 )
november = mydata %>% filter( month == 11 )
december = mydata %>% filter( month == 12 )
december
mean(september$Radiation)
mean(october$Radiation)
mean(november$Radiation)
mean(december$Radiation)
# september, october, december are close to each other. November is the coolest month.
head(mydata)
K <- cor(mydata[,1:10])
K
corrplot(K, method="circle")
## Manipulating temperature
mydata$Temperature = (mydata$Temperature - 32)* (5/9)
mydata$month = as.factor(mydata$month)
sun_duration = mydata$TimeSunSet - mydata$TimeSunRise
mydata = mydata[,-c(7,8)]
mydata = data.frame(mydata,sun_duration)
str(mydata)
## split data into a train and test set
index <- 1:nrow(mydata)
testindex <- sample(index, trunc(length(index)/4))
testset <- mydata[testindex,]
testindex
index
testset <- mydata[testindex,]
trainset <- mydata[-testindex,]
lm.fit= lm(Radiation ~ poly(Temperature,4) + Humidity + month + sun_duration ,data=trainset)
lm.fit$coefficients
summary(lm.fit)
lm.fit$coefficients
summary(lm.fit)
par(mfrow = c(2,2))
plot(lm.fit)
wp(lm.fit)
plot(mydata)
79000/2
